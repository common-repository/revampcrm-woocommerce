<?php
/**
 * ContactsApi
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\API;

use \RevampCRM\Client\Configuration;
use \RevampCRM\Client\ApiClient;
use \RevampCRM\Client\ApiException;
use \RevampCRM\Client\ObjectSerializer;

/**
 * ContactsApi Class Doc Comment
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactsApi
{

    /**
     * API Client
     *
     * @var \RevampCRM\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \RevampCRM\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\RevampCRM\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://app.revampcrm.com:443');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \RevampCRM\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \RevampCRM\Client\ApiClient $apiClient set the API client
     *
     * @return ContactsApi
     */
    public function setApiClient(\RevampCRM\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation contactsDelete
     *
     * Delete the contact(s) ids sent ( comma separated )
     *
     * @param \RevampCRM\Models\ContactsActionsViewModel $contacts_actions_view_model  (required)
     * @return \RevampCRM\Models\GenericObject
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsDelete($contacts_actions_view_model)
    {
        list($response) = $this->contactsDeleteWithHttpInfo($contacts_actions_view_model);
        return $response;
    }

    /**
     * Operation contactsDeleteWithHttpInfo
     *
     * Delete the contact(s) ids sent ( comma separated )
     *
     * @param \RevampCRM\Models\ContactsActionsViewModel $contacts_actions_view_model  (required)
     * @return Array of \RevampCRM\Models\GenericObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsDeleteWithHttpInfo($contacts_actions_view_model)
    {
        // verify the required parameter 'contacts_actions_view_model' is set
        if ($contacts_actions_view_model === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contacts_actions_view_model when calling contactsDelete');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Contacts/Delete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded','text/csv','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet','application/vnd.ms-excel'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($contacts_actions_view_model)) {
            $_tempBody = $contacts_actions_view_model;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\GenericObject',
                '/api/1.0/Contacts/Delete'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\GenericObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\GenericObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsExportContacts
     *
     * Export Contacts into CSV or XLSX format
     *
     * @param string $agefrom  (optional)
     * @param string $ageto  (optional)
     * @param string $gender  (optional)
     * @param string $country  (optional)
     * @param string $city  (optional)
     * @param string $postalcode  (optional)
     * @param string $state  (optional)
     * @param string $groupid  (optional)
     * @param string $dealstage  (optional)
     * @param string $assignuserid  (optional)
     * @param string $assignedtoname  (optional)
     * @param string $score  (optional)
     * @param string $tags  (optional)
     * @param string $invoicestatus  (optional)
     * @param string $condition  (optional)
     * @param string $ticketstatus  (optional)
     * @param bool $hastask  (optional)
     * @param string $tasksstatus  (optional)
     * @param int $contactedsince  (optional)
     * @param int $addedsince  (optional)
     * @param int $updatedsince  (optional)
     * @param bool $issearch  (optional)
     * @param bool $showcreategroup  (optional)
     * @param string $searchby  (optional)
     * @param bool $editgroup  (optional)
     * @param string $keyword  (optional)
     * @param string $ecommercequery  (optional)
     * @param int $pagesize  (optional)
     * @param int $page  (optional)
     * @param string $format  (optional)
     * @param string $sortby  (optional)
     * @param string $sortdirection  (optional)
     * @param bool $isedit  (optional)
     * @param bool $hasdeals  (optional)
     * @param string $customfield1  (optional)
     * @param string $customfield2  (optional)
     * @param string $customfield3  (optional)
     * @param bool $issavedsearch  (optional)
     * @param string $customfield4  (optional)
     * @param string $customfield5  (optional)
     * @param string $customfield6  (optional)
     * @param string $customfield7  (optional)
     * @param string $customfield8  (optional)
     * @param string $customfield9  (optional)
     * @param string $customfield10  (optional)
     * @param string $savedsearchid  (optional)
     * @param bool $iscustomer  (optional)
     * @param string $product  (optional)
     * @param string $dealstatus  (optional)
     * @param bool $hasemail  (optional)
     * @param bool $hasabout  (optional)
     * @param bool $hasinvoice  (optional)
     * @param bool $hastickets  (optional)
     * @param string $addedfrom  (optional)
     * @param string $addedto  (optional)
     * @param string $contactstage  (optional)
     * @param string $contactsource  (optional)
     * @param int $ecommercescore  (optional)
     * @param int $subscribed  (optional)
     * @return \RevampCRM\Models\ContactCSVApiModel[]
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsExportContacts($agefrom = null, $ageto = null, $gender = null, $country = null, $city = null, $postalcode = null, $state = null, $groupid = null, $dealstage = null, $assignuserid = null, $assignedtoname = null, $score = null, $tags = null, $invoicestatus = null, $condition = null, $ticketstatus = null, $hastask = null, $tasksstatus = null, $contactedsince = null, $addedsince = null, $updatedsince = null, $issearch = null, $showcreategroup = null, $searchby = null, $editgroup = null, $keyword = null, $ecommercequery = null, $pagesize = null, $page = null, $format = null, $sortby = null, $sortdirection = null, $isedit = null, $hasdeals = null, $customfield1 = null, $customfield2 = null, $customfield3 = null, $issavedsearch = null, $customfield4 = null, $customfield5 = null, $customfield6 = null, $customfield7 = null, $customfield8 = null, $customfield9 = null, $customfield10 = null, $savedsearchid = null, $iscustomer = null, $product = null, $dealstatus = null, $hasemail = null, $hasabout = null, $hasinvoice = null, $hastickets = null, $addedfrom = null, $addedto = null, $contactstage = null, $contactsource = null, $ecommercescore = null, $subscribed = null)
    {
        list($response) = $this->contactsExportContactsWithHttpInfo($agefrom, $ageto, $gender, $country, $city, $postalcode, $state, $groupid, $dealstage, $assignuserid, $assignedtoname, $score, $tags, $invoicestatus, $condition, $ticketstatus, $hastask, $tasksstatus, $contactedsince, $addedsince, $updatedsince, $issearch, $showcreategroup, $searchby, $editgroup, $keyword, $ecommercequery, $pagesize, $page, $format, $sortby, $sortdirection, $isedit, $hasdeals, $customfield1, $customfield2, $customfield3, $issavedsearch, $customfield4, $customfield5, $customfield6, $customfield7, $customfield8, $customfield9, $customfield10, $savedsearchid, $iscustomer, $product, $dealstatus, $hasemail, $hasabout, $hasinvoice, $hastickets, $addedfrom, $addedto, $contactstage, $contactsource, $ecommercescore, $subscribed);
        return $response;
    }

    /**
     * Operation contactsExportContactsWithHttpInfo
     *
     * Export Contacts into CSV or XLSX format
     *
     * @param string $agefrom  (optional)
     * @param string $ageto  (optional)
     * @param string $gender  (optional)
     * @param string $country  (optional)
     * @param string $city  (optional)
     * @param string $postalcode  (optional)
     * @param string $state  (optional)
     * @param string $groupid  (optional)
     * @param string $dealstage  (optional)
     * @param string $assignuserid  (optional)
     * @param string $assignedtoname  (optional)
     * @param string $score  (optional)
     * @param string $tags  (optional)
     * @param string $invoicestatus  (optional)
     * @param string $condition  (optional)
     * @param string $ticketstatus  (optional)
     * @param bool $hastask  (optional)
     * @param string $tasksstatus  (optional)
     * @param int $contactedsince  (optional)
     * @param int $addedsince  (optional)
     * @param int $updatedsince  (optional)
     * @param bool $issearch  (optional)
     * @param bool $showcreategroup  (optional)
     * @param string $searchby  (optional)
     * @param bool $editgroup  (optional)
     * @param string $keyword  (optional)
     * @param string $ecommercequery  (optional)
     * @param int $pagesize  (optional)
     * @param int $page  (optional)
     * @param string $format  (optional)
     * @param string $sortby  (optional)
     * @param string $sortdirection  (optional)
     * @param bool $isedit  (optional)
     * @param bool $hasdeals  (optional)
     * @param string $customfield1  (optional)
     * @param string $customfield2  (optional)
     * @param string $customfield3  (optional)
     * @param bool $issavedsearch  (optional)
     * @param string $customfield4  (optional)
     * @param string $customfield5  (optional)
     * @param string $customfield6  (optional)
     * @param string $customfield7  (optional)
     * @param string $customfield8  (optional)
     * @param string $customfield9  (optional)
     * @param string $customfield10  (optional)
     * @param string $savedsearchid  (optional)
     * @param bool $iscustomer  (optional)
     * @param string $product  (optional)
     * @param string $dealstatus  (optional)
     * @param bool $hasemail  (optional)
     * @param bool $hasabout  (optional)
     * @param bool $hasinvoice  (optional)
     * @param bool $hastickets  (optional)
     * @param string $addedfrom  (optional)
     * @param string $addedto  (optional)
     * @param string $contactstage  (optional)
     * @param string $contactsource  (optional)
     * @param int $ecommercescore  (optional)
     * @param int $subscribed  (optional)
     * @return Array of \RevampCRM\Models\ContactCSVApiModel[], HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsExportContactsWithHttpInfo($agefrom = null, $ageto = null, $gender = null, $country = null, $city = null, $postalcode = null, $state = null, $groupid = null, $dealstage = null, $assignuserid = null, $assignedtoname = null, $score = null, $tags = null, $invoicestatus = null, $condition = null, $ticketstatus = null, $hastask = null, $tasksstatus = null, $contactedsince = null, $addedsince = null, $updatedsince = null, $issearch = null, $showcreategroup = null, $searchby = null, $editgroup = null, $keyword = null, $ecommercequery = null, $pagesize = null, $page = null, $format = null, $sortby = null, $sortdirection = null, $isedit = null, $hasdeals = null, $customfield1 = null, $customfield2 = null, $customfield3 = null, $issavedsearch = null, $customfield4 = null, $customfield5 = null, $customfield6 = null, $customfield7 = null, $customfield8 = null, $customfield9 = null, $customfield10 = null, $savedsearchid = null, $iscustomer = null, $product = null, $dealstatus = null, $hasemail = null, $hasabout = null, $hasinvoice = null, $hastickets = null, $addedfrom = null, $addedto = null, $contactstage = null, $contactsource = null, $ecommercescore = null, $subscribed = null)
    {
        // parse inputs
        $resourcePath = "/api/1.0/Contacts/ExportContacts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($agefrom !== null) {
            $queryParams['agefrom'] = $this->apiClient->getSerializer()->toQueryValue($agefrom);
        }
        // query params
        if ($ageto !== null) {
            $queryParams['ageto'] = $this->apiClient->getSerializer()->toQueryValue($ageto);
        }
        // query params
        if ($gender !== null) {
            $queryParams['gender'] = $this->apiClient->getSerializer()->toQueryValue($gender);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = $this->apiClient->getSerializer()->toQueryValue($city);
        }
        // query params
        if ($postalcode !== null) {
            $queryParams['postalcode'] = $this->apiClient->getSerializer()->toQueryValue($postalcode);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if ($groupid !== null) {
            $queryParams['groupid'] = $this->apiClient->getSerializer()->toQueryValue($groupid);
        }
        // query params
        if ($dealstage !== null) {
            $queryParams['dealstage'] = $this->apiClient->getSerializer()->toQueryValue($dealstage);
        }
        // query params
        if ($assignuserid !== null) {
            $queryParams['assignuserid'] = $this->apiClient->getSerializer()->toQueryValue($assignuserid);
        }
        // query params
        if ($assignedtoname !== null) {
            $queryParams['assignedtoname'] = $this->apiClient->getSerializer()->toQueryValue($assignedtoname);
        }
        // query params
        if ($score !== null) {
            $queryParams['score'] = $this->apiClient->getSerializer()->toQueryValue($score);
        }
        // query params
        if ($tags !== null) {
            $queryParams['tags'] = $this->apiClient->getSerializer()->toQueryValue($tags);
        }
        // query params
        if ($invoicestatus !== null) {
            $queryParams['invoicestatus'] = $this->apiClient->getSerializer()->toQueryValue($invoicestatus);
        }
        // query params
        if ($condition !== null) {
            $queryParams['condition'] = $this->apiClient->getSerializer()->toQueryValue($condition);
        }
        // query params
        if ($ticketstatus !== null) {
            $queryParams['ticketstatus'] = $this->apiClient->getSerializer()->toQueryValue($ticketstatus);
        }
        // query params
        if ($hastask !== null) {
            $queryParams['hastask'] = $this->apiClient->getSerializer()->toQueryValue($hastask);
        }
        // query params
        if ($tasksstatus !== null) {
            $queryParams['tasksstatus'] = $this->apiClient->getSerializer()->toQueryValue($tasksstatus);
        }
        // query params
        if ($contactedsince !== null) {
            $queryParams['contactedsince'] = $this->apiClient->getSerializer()->toQueryValue($contactedsince);
        }
        // query params
        if ($addedsince !== null) {
            $queryParams['addedsince'] = $this->apiClient->getSerializer()->toQueryValue($addedsince);
        }
        // query params
        if ($updatedsince !== null) {
            $queryParams['updatedsince'] = $this->apiClient->getSerializer()->toQueryValue($updatedsince);
        }
        // query params
        if ($issearch !== null) {
            $queryParams['issearch'] = $this->apiClient->getSerializer()->toQueryValue($issearch);
        }
        // query params
        if ($showcreategroup !== null) {
            $queryParams['showcreategroup'] = $this->apiClient->getSerializer()->toQueryValue($showcreategroup);
        }
        // query params
        if ($searchby !== null) {
            $queryParams['searchby'] = $this->apiClient->getSerializer()->toQueryValue($searchby);
        }
        // query params
        if ($editgroup !== null) {
            $queryParams['editgroup'] = $this->apiClient->getSerializer()->toQueryValue($editgroup);
        }
        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }
        // query params
        if ($ecommercequery !== null) {
            $queryParams['ecommercequery'] = $this->apiClient->getSerializer()->toQueryValue($ecommercequery);
        }
        // query params
        if ($pagesize !== null) {
            $queryParams['pagesize'] = $this->apiClient->getSerializer()->toQueryValue($pagesize);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($sortby !== null) {
            $queryParams['sortby'] = $this->apiClient->getSerializer()->toQueryValue($sortby);
        }
        // query params
        if ($sortdirection !== null) {
            $queryParams['sortdirection'] = $this->apiClient->getSerializer()->toQueryValue($sortdirection);
        }
        // query params
        if ($isedit !== null) {
            $queryParams['isedit'] = $this->apiClient->getSerializer()->toQueryValue($isedit);
        }
        // query params
        if ($hasdeals !== null) {
            $queryParams['hasdeals'] = $this->apiClient->getSerializer()->toQueryValue($hasdeals);
        }
        // query params
        if ($customfield1 !== null) {
            $queryParams['customfield1'] = $this->apiClient->getSerializer()->toQueryValue($customfield1);
        }
        // query params
        if ($customfield2 !== null) {
            $queryParams['customfield2'] = $this->apiClient->getSerializer()->toQueryValue($customfield2);
        }
        // query params
        if ($customfield3 !== null) {
            $queryParams['customfield3'] = $this->apiClient->getSerializer()->toQueryValue($customfield3);
        }
        // query params
        if ($issavedsearch !== null) {
            $queryParams['issavedsearch'] = $this->apiClient->getSerializer()->toQueryValue($issavedsearch);
        }
        // query params
        if ($customfield4 !== null) {
            $queryParams['customfield4'] = $this->apiClient->getSerializer()->toQueryValue($customfield4);
        }
        // query params
        if ($customfield5 !== null) {
            $queryParams['customfield5'] = $this->apiClient->getSerializer()->toQueryValue($customfield5);
        }
        // query params
        if ($customfield6 !== null) {
            $queryParams['customfield6'] = $this->apiClient->getSerializer()->toQueryValue($customfield6);
        }
        // query params
        if ($customfield7 !== null) {
            $queryParams['customfield7'] = $this->apiClient->getSerializer()->toQueryValue($customfield7);
        }
        // query params
        if ($customfield8 !== null) {
            $queryParams['customfield8'] = $this->apiClient->getSerializer()->toQueryValue($customfield8);
        }
        // query params
        if ($customfield9 !== null) {
            $queryParams['customfield9'] = $this->apiClient->getSerializer()->toQueryValue($customfield9);
        }
        // query params
        if ($customfield10 !== null) {
            $queryParams['customfield10'] = $this->apiClient->getSerializer()->toQueryValue($customfield10);
        }
        // query params
        if ($savedsearchid !== null) {
            $queryParams['savedsearchid'] = $this->apiClient->getSerializer()->toQueryValue($savedsearchid);
        }
        // query params
        if ($iscustomer !== null) {
            $queryParams['iscustomer'] = $this->apiClient->getSerializer()->toQueryValue($iscustomer);
        }
        // query params
        if ($product !== null) {
            $queryParams['product'] = $this->apiClient->getSerializer()->toQueryValue($product);
        }
        // query params
        if ($dealstatus !== null) {
            $queryParams['dealstatus'] = $this->apiClient->getSerializer()->toQueryValue($dealstatus);
        }
        // query params
        if ($hasemail !== null) {
            $queryParams['hasemail'] = $this->apiClient->getSerializer()->toQueryValue($hasemail);
        }
        // query params
        if ($hasabout !== null) {
            $queryParams['hasabout'] = $this->apiClient->getSerializer()->toQueryValue($hasabout);
        }
        // query params
        if ($hasinvoice !== null) {
            $queryParams['hasinvoice'] = $this->apiClient->getSerializer()->toQueryValue($hasinvoice);
        }
        // query params
        if ($hastickets !== null) {
            $queryParams['hastickets'] = $this->apiClient->getSerializer()->toQueryValue($hastickets);
        }
        // query params
        if ($addedfrom !== null) {
            $queryParams['addedfrom'] = $this->apiClient->getSerializer()->toQueryValue($addedfrom);
        }
        // query params
        if ($addedto !== null) {
            $queryParams['addedto'] = $this->apiClient->getSerializer()->toQueryValue($addedto);
        }
        // query params
        if ($contactstage !== null) {
            $queryParams['contactstage'] = $this->apiClient->getSerializer()->toQueryValue($contactstage);
        }
        // query params
        if ($contactsource !== null) {
            $queryParams['contactsource'] = $this->apiClient->getSerializer()->toQueryValue($contactsource);
        }
        // query params
        if ($ecommercescore !== null) {
            $queryParams['ecommercescore'] = $this->apiClient->getSerializer()->toQueryValue($ecommercescore);
        }
        // query params
        if ($subscribed !== null) {
            $queryParams['subscribed'] = $this->apiClient->getSerializer()->toQueryValue($subscribed);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\ContactCSVApiModel[]',
                '/api/1.0/Contacts/ExportContacts'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\ContactCSVApiModel[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\ContactCSVApiModel[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsExportSingleContact
     *
     * Export Single Contacts into CSV or XLSX format
     *
     * @param string $format Either \&quot;csv\&quot; or \&quot;xlsx\&quot; (required)
     * @param string $id Contact ID to export (required)
     * @return \RevampCRM\Models\ContactCSVApiModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsExportSingleContact($format, $id)
    {
        list($response) = $this->contactsExportSingleContactWithHttpInfo($format, $id);
        return $response;
    }

    /**
     * Operation contactsExportSingleContactWithHttpInfo
     *
     * Export Single Contacts into CSV or XLSX format
     *
     * @param string $format Either \&quot;csv\&quot; or \&quot;xlsx\&quot; (required)
     * @param string $id Contact ID to export (required)
     * @return Array of \RevampCRM\Models\ContactCSVApiModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsExportSingleContactWithHttpInfo($format, $id)
    {
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling contactsExportSingleContact');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling contactsExportSingleContact');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Contacts/ExportSingleContact";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\ContactCSVApiModel',
                '/api/1.0/Contacts/ExportSingleContact'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\ContactCSVApiModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\ContactCSVApiModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsGet
     *
     * Search and get List of matchig contacts
     *
     * @param string $agefrom  (optional)
     * @param string $ageto  (optional)
     * @param string $gender  (optional)
     * @param string $country  (optional)
     * @param string $city  (optional)
     * @param string $postalcode  (optional)
     * @param string $state  (optional)
     * @param string $groupid  (optional)
     * @param string $dealstage  (optional)
     * @param string $assignuserid  (optional)
     * @param string $assignedtoname  (optional)
     * @param string $score  (optional)
     * @param string $tags  (optional)
     * @param string $invoicestatus  (optional)
     * @param string $condition  (optional)
     * @param string $ticketstatus  (optional)
     * @param bool $hastask  (optional)
     * @param string $tasksstatus  (optional)
     * @param int $contactedsince  (optional)
     * @param int $addedsince  (optional)
     * @param int $updatedsince  (optional)
     * @param bool $issearch  (optional)
     * @param bool $showcreategroup  (optional)
     * @param string $searchby  (optional)
     * @param bool $editgroup  (optional)
     * @param string $keyword  (optional)
     * @param string $ecommercequery  (optional)
     * @param int $pagesize  (optional)
     * @param int $page  (optional)
     * @param string $format  (optional)
     * @param string $sortby  (optional)
     * @param string $sortdirection  (optional)
     * @param bool $isedit  (optional)
     * @param bool $hasdeals  (optional)
     * @param string $customfield1  (optional)
     * @param string $customfield2  (optional)
     * @param string $customfield3  (optional)
     * @param bool $issavedsearch  (optional)
     * @param string $customfield4  (optional)
     * @param string $customfield5  (optional)
     * @param string $customfield6  (optional)
     * @param string $customfield7  (optional)
     * @param string $customfield8  (optional)
     * @param string $customfield9  (optional)
     * @param string $customfield10  (optional)
     * @param string $savedsearchid  (optional)
     * @param bool $iscustomer  (optional)
     * @param string $product  (optional)
     * @param string $dealstatus  (optional)
     * @param bool $hasemail  (optional)
     * @param bool $hasabout  (optional)
     * @param bool $hasinvoice  (optional)
     * @param bool $hastickets  (optional)
     * @param string $addedfrom  (optional)
     * @param string $addedto  (optional)
     * @param string $contactstage  (optional)
     * @param string $contactsource  (optional)
     * @param int $ecommercescore  (optional)
     * @param int $subscribed  (optional)
     * @return \RevampCRM\Models\ContactsListViewModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsGet($agefrom = null, $ageto = null, $gender = null, $country = null, $city = null, $postalcode = null, $state = null, $groupid = null, $dealstage = null, $assignuserid = null, $assignedtoname = null, $score = null, $tags = null, $invoicestatus = null, $condition = null, $ticketstatus = null, $hastask = null, $tasksstatus = null, $contactedsince = null, $addedsince = null, $updatedsince = null, $issearch = null, $showcreategroup = null, $searchby = null, $editgroup = null, $keyword = null, $ecommercequery = null, $pagesize = null, $page = null, $format = null, $sortby = null, $sortdirection = null, $isedit = null, $hasdeals = null, $customfield1 = null, $customfield2 = null, $customfield3 = null, $issavedsearch = null, $customfield4 = null, $customfield5 = null, $customfield6 = null, $customfield7 = null, $customfield8 = null, $customfield9 = null, $customfield10 = null, $savedsearchid = null, $iscustomer = null, $product = null, $dealstatus = null, $hasemail = null, $hasabout = null, $hasinvoice = null, $hastickets = null, $addedfrom = null, $addedto = null, $contactstage = null, $contactsource = null, $ecommercescore = null, $subscribed = null)
    {
        list($response) = $this->contactsGetWithHttpInfo($agefrom, $ageto, $gender, $country, $city, $postalcode, $state, $groupid, $dealstage, $assignuserid, $assignedtoname, $score, $tags, $invoicestatus, $condition, $ticketstatus, $hastask, $tasksstatus, $contactedsince, $addedsince, $updatedsince, $issearch, $showcreategroup, $searchby, $editgroup, $keyword, $ecommercequery, $pagesize, $page, $format, $sortby, $sortdirection, $isedit, $hasdeals, $customfield1, $customfield2, $customfield3, $issavedsearch, $customfield4, $customfield5, $customfield6, $customfield7, $customfield8, $customfield9, $customfield10, $savedsearchid, $iscustomer, $product, $dealstatus, $hasemail, $hasabout, $hasinvoice, $hastickets, $addedfrom, $addedto, $contactstage, $contactsource, $ecommercescore, $subscribed);
        return $response;
    }

    /**
     * Operation contactsGetWithHttpInfo
     *
     * Search and get List of matchig contacts
     *
     * @param string $agefrom  (optional)
     * @param string $ageto  (optional)
     * @param string $gender  (optional)
     * @param string $country  (optional)
     * @param string $city  (optional)
     * @param string $postalcode  (optional)
     * @param string $state  (optional)
     * @param string $groupid  (optional)
     * @param string $dealstage  (optional)
     * @param string $assignuserid  (optional)
     * @param string $assignedtoname  (optional)
     * @param string $score  (optional)
     * @param string $tags  (optional)
     * @param string $invoicestatus  (optional)
     * @param string $condition  (optional)
     * @param string $ticketstatus  (optional)
     * @param bool $hastask  (optional)
     * @param string $tasksstatus  (optional)
     * @param int $contactedsince  (optional)
     * @param int $addedsince  (optional)
     * @param int $updatedsince  (optional)
     * @param bool $issearch  (optional)
     * @param bool $showcreategroup  (optional)
     * @param string $searchby  (optional)
     * @param bool $editgroup  (optional)
     * @param string $keyword  (optional)
     * @param string $ecommercequery  (optional)
     * @param int $pagesize  (optional)
     * @param int $page  (optional)
     * @param string $format  (optional)
     * @param string $sortby  (optional)
     * @param string $sortdirection  (optional)
     * @param bool $isedit  (optional)
     * @param bool $hasdeals  (optional)
     * @param string $customfield1  (optional)
     * @param string $customfield2  (optional)
     * @param string $customfield3  (optional)
     * @param bool $issavedsearch  (optional)
     * @param string $customfield4  (optional)
     * @param string $customfield5  (optional)
     * @param string $customfield6  (optional)
     * @param string $customfield7  (optional)
     * @param string $customfield8  (optional)
     * @param string $customfield9  (optional)
     * @param string $customfield10  (optional)
     * @param string $savedsearchid  (optional)
     * @param bool $iscustomer  (optional)
     * @param string $product  (optional)
     * @param string $dealstatus  (optional)
     * @param bool $hasemail  (optional)
     * @param bool $hasabout  (optional)
     * @param bool $hasinvoice  (optional)
     * @param bool $hastickets  (optional)
     * @param string $addedfrom  (optional)
     * @param string $addedto  (optional)
     * @param string $contactstage  (optional)
     * @param string $contactsource  (optional)
     * @param int $ecommercescore  (optional)
     * @param int $subscribed  (optional)
     * @return Array of \RevampCRM\Models\ContactsListViewModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsGetWithHttpInfo($agefrom = null, $ageto = null, $gender = null, $country = null, $city = null, $postalcode = null, $state = null, $groupid = null, $dealstage = null, $assignuserid = null, $assignedtoname = null, $score = null, $tags = null, $invoicestatus = null, $condition = null, $ticketstatus = null, $hastask = null, $tasksstatus = null, $contactedsince = null, $addedsince = null, $updatedsince = null, $issearch = null, $showcreategroup = null, $searchby = null, $editgroup = null, $keyword = null, $ecommercequery = null, $pagesize = null, $page = null, $format = null, $sortby = null, $sortdirection = null, $isedit = null, $hasdeals = null, $customfield1 = null, $customfield2 = null, $customfield3 = null, $issavedsearch = null, $customfield4 = null, $customfield5 = null, $customfield6 = null, $customfield7 = null, $customfield8 = null, $customfield9 = null, $customfield10 = null, $savedsearchid = null, $iscustomer = null, $product = null, $dealstatus = null, $hasemail = null, $hasabout = null, $hasinvoice = null, $hastickets = null, $addedfrom = null, $addedto = null, $contactstage = null, $contactsource = null, $ecommercescore = null, $subscribed = null)
    {
        // parse inputs
        $resourcePath = "/api/1.0/Contacts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($agefrom !== null) {
            $queryParams['agefrom'] = $this->apiClient->getSerializer()->toQueryValue($agefrom);
        }
        // query params
        if ($ageto !== null) {
            $queryParams['ageto'] = $this->apiClient->getSerializer()->toQueryValue($ageto);
        }
        // query params
        if ($gender !== null) {
            $queryParams['gender'] = $this->apiClient->getSerializer()->toQueryValue($gender);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = $this->apiClient->getSerializer()->toQueryValue($city);
        }
        // query params
        if ($postalcode !== null) {
            $queryParams['postalcode'] = $this->apiClient->getSerializer()->toQueryValue($postalcode);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if ($groupid !== null) {
            $queryParams['groupid'] = $this->apiClient->getSerializer()->toQueryValue($groupid);
        }
        // query params
        if ($dealstage !== null) {
            $queryParams['dealstage'] = $this->apiClient->getSerializer()->toQueryValue($dealstage);
        }
        // query params
        if ($assignuserid !== null) {
            $queryParams['assignuserid'] = $this->apiClient->getSerializer()->toQueryValue($assignuserid);
        }
        // query params
        if ($assignedtoname !== null) {
            $queryParams['assignedtoname'] = $this->apiClient->getSerializer()->toQueryValue($assignedtoname);
        }
        // query params
        if ($score !== null) {
            $queryParams['score'] = $this->apiClient->getSerializer()->toQueryValue($score);
        }
        // query params
        if ($tags !== null) {
            $queryParams['tags'] = $this->apiClient->getSerializer()->toQueryValue($tags);
        }
        // query params
        if ($invoicestatus !== null) {
            $queryParams['invoicestatus'] = $this->apiClient->getSerializer()->toQueryValue($invoicestatus);
        }
        // query params
        if ($condition !== null) {
            $queryParams['condition'] = $this->apiClient->getSerializer()->toQueryValue($condition);
        }
        // query params
        if ($ticketstatus !== null) {
            $queryParams['ticketstatus'] = $this->apiClient->getSerializer()->toQueryValue($ticketstatus);
        }
        // query params
        if ($hastask !== null) {
            $queryParams['hastask'] = $this->apiClient->getSerializer()->toQueryValue($hastask);
        }
        // query params
        if ($tasksstatus !== null) {
            $queryParams['tasksstatus'] = $this->apiClient->getSerializer()->toQueryValue($tasksstatus);
        }
        // query params
        if ($contactedsince !== null) {
            $queryParams['contactedsince'] = $this->apiClient->getSerializer()->toQueryValue($contactedsince);
        }
        // query params
        if ($addedsince !== null) {
            $queryParams['addedsince'] = $this->apiClient->getSerializer()->toQueryValue($addedsince);
        }
        // query params
        if ($updatedsince !== null) {
            $queryParams['updatedsince'] = $this->apiClient->getSerializer()->toQueryValue($updatedsince);
        }
        // query params
        if ($issearch !== null) {
            $queryParams['issearch'] = $this->apiClient->getSerializer()->toQueryValue($issearch);
        }
        // query params
        if ($showcreategroup !== null) {
            $queryParams['showcreategroup'] = $this->apiClient->getSerializer()->toQueryValue($showcreategroup);
        }
        // query params
        if ($searchby !== null) {
            $queryParams['searchby'] = $this->apiClient->getSerializer()->toQueryValue($searchby);
        }
        // query params
        if ($editgroup !== null) {
            $queryParams['editgroup'] = $this->apiClient->getSerializer()->toQueryValue($editgroup);
        }
        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }
        // query params
        if ($ecommercequery !== null) {
            $queryParams['ecommercequery'] = $this->apiClient->getSerializer()->toQueryValue($ecommercequery);
        }
        // query params
        if ($pagesize !== null) {
            $queryParams['pagesize'] = $this->apiClient->getSerializer()->toQueryValue($pagesize);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($sortby !== null) {
            $queryParams['sortby'] = $this->apiClient->getSerializer()->toQueryValue($sortby);
        }
        // query params
        if ($sortdirection !== null) {
            $queryParams['sortdirection'] = $this->apiClient->getSerializer()->toQueryValue($sortdirection);
        }
        // query params
        if ($isedit !== null) {
            $queryParams['isedit'] = $this->apiClient->getSerializer()->toQueryValue($isedit);
        }
        // query params
        if ($hasdeals !== null) {
            $queryParams['hasdeals'] = $this->apiClient->getSerializer()->toQueryValue($hasdeals);
        }
        // query params
        if ($customfield1 !== null) {
            $queryParams['customfield1'] = $this->apiClient->getSerializer()->toQueryValue($customfield1);
        }
        // query params
        if ($customfield2 !== null) {
            $queryParams['customfield2'] = $this->apiClient->getSerializer()->toQueryValue($customfield2);
        }
        // query params
        if ($customfield3 !== null) {
            $queryParams['customfield3'] = $this->apiClient->getSerializer()->toQueryValue($customfield3);
        }
        // query params
        if ($issavedsearch !== null) {
            $queryParams['issavedsearch'] = $this->apiClient->getSerializer()->toQueryValue($issavedsearch);
        }
        // query params
        if ($customfield4 !== null) {
            $queryParams['customfield4'] = $this->apiClient->getSerializer()->toQueryValue($customfield4);
        }
        // query params
        if ($customfield5 !== null) {
            $queryParams['customfield5'] = $this->apiClient->getSerializer()->toQueryValue($customfield5);
        }
        // query params
        if ($customfield6 !== null) {
            $queryParams['customfield6'] = $this->apiClient->getSerializer()->toQueryValue($customfield6);
        }
        // query params
        if ($customfield7 !== null) {
            $queryParams['customfield7'] = $this->apiClient->getSerializer()->toQueryValue($customfield7);
        }
        // query params
        if ($customfield8 !== null) {
            $queryParams['customfield8'] = $this->apiClient->getSerializer()->toQueryValue($customfield8);
        }
        // query params
        if ($customfield9 !== null) {
            $queryParams['customfield9'] = $this->apiClient->getSerializer()->toQueryValue($customfield9);
        }
        // query params
        if ($customfield10 !== null) {
            $queryParams['customfield10'] = $this->apiClient->getSerializer()->toQueryValue($customfield10);
        }
        // query params
        if ($savedsearchid !== null) {
            $queryParams['savedsearchid'] = $this->apiClient->getSerializer()->toQueryValue($savedsearchid);
        }
        // query params
        if ($iscustomer !== null) {
            $queryParams['iscustomer'] = $this->apiClient->getSerializer()->toQueryValue($iscustomer);
        }
        // query params
        if ($product !== null) {
            $queryParams['product'] = $this->apiClient->getSerializer()->toQueryValue($product);
        }
        // query params
        if ($dealstatus !== null) {
            $queryParams['dealstatus'] = $this->apiClient->getSerializer()->toQueryValue($dealstatus);
        }
        // query params
        if ($hasemail !== null) {
            $queryParams['hasemail'] = $this->apiClient->getSerializer()->toQueryValue($hasemail);
        }
        // query params
        if ($hasabout !== null) {
            $queryParams['hasabout'] = $this->apiClient->getSerializer()->toQueryValue($hasabout);
        }
        // query params
        if ($hasinvoice !== null) {
            $queryParams['hasinvoice'] = $this->apiClient->getSerializer()->toQueryValue($hasinvoice);
        }
        // query params
        if ($hastickets !== null) {
            $queryParams['hastickets'] = $this->apiClient->getSerializer()->toQueryValue($hastickets);
        }
        // query params
        if ($addedfrom !== null) {
            $queryParams['addedfrom'] = $this->apiClient->getSerializer()->toQueryValue($addedfrom);
        }
        // query params
        if ($addedto !== null) {
            $queryParams['addedto'] = $this->apiClient->getSerializer()->toQueryValue($addedto);
        }
        // query params
        if ($contactstage !== null) {
            $queryParams['contactstage'] = $this->apiClient->getSerializer()->toQueryValue($contactstage);
        }
        // query params
        if ($contactsource !== null) {
            $queryParams['contactsource'] = $this->apiClient->getSerializer()->toQueryValue($contactsource);
        }
        // query params
        if ($ecommercescore !== null) {
            $queryParams['ecommercescore'] = $this->apiClient->getSerializer()->toQueryValue($ecommercescore);
        }
        // query params
        if ($subscribed !== null) {
            $queryParams['subscribed'] = $this->apiClient->getSerializer()->toQueryValue($subscribed);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\ContactsListViewModel',
                '/api/1.0/Contacts'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\ContactsListViewModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\ContactsListViewModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsGetByAlphabet
     *
     * Get Contacts grouped by alphabet
     *
     * @param int $page_size Defaults to 10, maximum of 100 (optional)
     * @param int $page page index starting from 0 (optional)
     * @return \RevampCRM\Models\ContactsListByAlphabetViewModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsGetByAlphabet($page_size = null, $page = null)
    {
        list($response) = $this->contactsGetByAlphabetWithHttpInfo($page_size, $page);
        return $response;
    }

    /**
     * Operation contactsGetByAlphabetWithHttpInfo
     *
     * Get Contacts grouped by alphabet
     *
     * @param int $page_size Defaults to 10, maximum of 100 (optional)
     * @param int $page page index starting from 0 (optional)
     * @return Array of \RevampCRM\Models\ContactsListByAlphabetViewModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsGetByAlphabetWithHttpInfo($page_size = null, $page = null)
    {
        // parse inputs
        $resourcePath = "/api/1.0/Contacts/ByAlphabet";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\ContactsListByAlphabetViewModel',
                '/api/1.0/Contacts/ByAlphabet'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\ContactsListByAlphabetViewModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\ContactsListByAlphabetViewModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsGetSingleContact
     *
     * Search and get List of matchig contacts
     *
     * @param string $contact_id  (required)
     * @return \RevampCRM\Models\ContactDealsDetailsViewModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsGetSingleContact($contact_id)
    {
        list($response) = $this->contactsGetSingleContactWithHttpInfo($contact_id);
        return $response;
    }

    /**
     * Operation contactsGetSingleContactWithHttpInfo
     *
     * Search and get List of matchig contacts
     *
     * @param string $contact_id  (required)
     * @return Array of \RevampCRM\Models\ContactDealsDetailsViewModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsGetSingleContactWithHttpInfo($contact_id)
    {
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_id when calling contactsGetSingleContact');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Contacts/GetSingleContact/{contactId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                "{" . "contactId" . "}",
                $this->apiClient->getSerializer()->toPathValue($contact_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\ContactDealsDetailsViewModel',
                '/api/1.0/Contacts/GetSingleContact/{contactId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\ContactDealsDetailsViewModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\ContactDealsDetailsViewModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsImportContacts
     *
     * Imports the provided CSV contacts file into list ( Add / Update )
     *
     * @param bool $islinkedin Default to false, true to match \&quot;Microsoft Outlook\&quot; exported CSV file from linkedin (optional)
     * @return \RevampCRM\Models\GenericObject
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsImportContacts($islinkedin = null)
    {
        list($response) = $this->contactsImportContactsWithHttpInfo($islinkedin);
        return $response;
    }

    /**
     * Operation contactsImportContactsWithHttpInfo
     *
     * Imports the provided CSV contacts file into list ( Add / Update )
     *
     * @param bool $islinkedin Default to false, true to match \&quot;Microsoft Outlook\&quot; exported CSV file from linkedin (optional)
     * @return Array of \RevampCRM\Models\GenericObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsImportContactsWithHttpInfo($islinkedin = null)
    {
        // parse inputs
        $resourcePath = "/api/1.0/Contacts/ImportContacts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($islinkedin !== null) {
            $queryParams['Islinkedin'] = $this->apiClient->getSerializer()->toQueryValue($islinkedin);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\GenericObject',
                '/api/1.0/Contacts/ImportContacts'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\GenericObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\GenericObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsPost
     *
     * Inserts a new contact
     *
     * @param \RevampCRM\Models\ContactEditViewModel $model  (required)
     * @return \RevampCRM\Models\ImportResultViewModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsPost($model)
    {
        list($response) = $this->contactsPostWithHttpInfo($model);
        return $response;
    }

    /**
     * Operation contactsPostWithHttpInfo
     *
     * Inserts a new contact
     *
     * @param \RevampCRM\Models\ContactEditViewModel $model  (required)
     * @return Array of \RevampCRM\Models\ImportResultViewModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsPostWithHttpInfo($model)
    {
        // verify the required parameter 'model' is set
        if ($model === null) {
            throw new \InvalidArgumentException('Missing the required parameter $model when calling contactsPost');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Contacts/New";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded','text/csv','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet','application/vnd.ms-excel'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\ImportResultViewModel',
                '/api/1.0/Contacts/New'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\ImportResultViewModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\ImportResultViewModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsPut
     *
     * Update existing contact
     *
     * @param \RevampCRM\Models\ContactEditViewModel $contact  (required)
     * @return \RevampCRM\Models\ImportResultViewModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsPut($contact)
    {
        list($response) = $this->contactsPutWithHttpInfo($contact);
        return $response;
    }

    /**
     * Operation contactsPutWithHttpInfo
     *
     * Update existing contact
     *
     * @param \RevampCRM\Models\ContactEditViewModel $contact  (required)
     * @return Array of \RevampCRM\Models\ImportResultViewModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsPutWithHttpInfo($contact)
    {
        // verify the required parameter 'contact' is set
        if ($contact === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact when calling contactsPut');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Contacts/Edit";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded','text/csv','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet','application/vnd.ms-excel'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($contact)) {
            $_tempBody = $contact;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\ImportResultViewModel',
                '/api/1.0/Contacts/Edit'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\ImportResultViewModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\ImportResultViewModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsUpdateLists
     *
     * 
     *
     * @param string $contact_id  (required)
     * @param string $list_ids  (required)
     * @return \RevampCRM\Models\SelectViewModel[]
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsUpdateLists($contact_id, $list_ids)
    {
        list($response) = $this->contactsUpdateListsWithHttpInfo($contact_id, $list_ids);
        return $response;
    }

    /**
     * Operation contactsUpdateListsWithHttpInfo
     *
     * 
     *
     * @param string $contact_id  (required)
     * @param string $list_ids  (required)
     * @return Array of \RevampCRM\Models\SelectViewModel[], HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function contactsUpdateListsWithHttpInfo($contact_id, $list_ids)
    {
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_id when calling contactsUpdateLists');
        }
        // verify the required parameter 'list_ids' is set
        if ($list_ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $list_ids when calling contactsUpdateLists');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Contacts/UpdateLists/{ContactId}/{ListIds}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                "{" . "ContactId" . "}",
                $this->apiClient->getSerializer()->toPathValue($contact_id),
                $resourcePath
            );
        }
        // path params
        if ($list_ids !== null) {
            $resourcePath = str_replace(
                "{" . "ListIds" . "}",
                $this->apiClient->getSerializer()->toPathValue($list_ids),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\SelectViewModel[]',
                '/api/1.0/Contacts/UpdateLists/{ContactId}/{ListIds}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\SelectViewModel[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\SelectViewModel[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dealsGetForContact
     *
     * 
     *
     * @param string $contact_id  (required)
     * @return \RevampCRM\Models\ContactDealListViewModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsGetForContact($contact_id)
    {
        list($response) = $this->dealsGetForContactWithHttpInfo($contact_id);
        return $response;
    }

    /**
     * Operation dealsGetForContactWithHttpInfo
     *
     * 
     *
     * @param string $contact_id  (required)
     * @return Array of \RevampCRM\Models\ContactDealListViewModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsGetForContactWithHttpInfo($contact_id)
    {
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_id when calling dealsGetForContact');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Contacts/{contactId}/Deals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                "{" . "contactId" . "}",
                $this->apiClient->getSerializer()->toPathValue($contact_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\ContactDealListViewModel',
                '/api/1.0/Contacts/{contactId}/Deals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\ContactDealListViewModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\ContactDealListViewModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
