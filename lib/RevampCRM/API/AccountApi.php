<?php
/**
 * AccountApi
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\API;

use \RevampCRM\Client\Configuration;
use \RevampCRM\Client\ApiClient;
use \RevampCRM\Client\ApiException;
use \RevampCRM\Client\ObjectSerializer;

/**
 * AccountApi Class Doc Comment
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountApi
{

    /**
     * API Client
     *
     * @var \RevampCRM\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \RevampCRM\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\RevampCRM\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://app.revampcrm.com:443');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \RevampCRM\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \RevampCRM\Client\ApiClient $apiClient set the API client
     *
     * @return AccountApi
     */
    public function setApiClient(\RevampCRM\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation accountOptionApiGetAccountCustomFields
     *
     * 
     *
     * @return \RevampCRM\Models\CustomFieldEntity[]
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function accountOptionApiGetAccountCustomFields()
    {
        list($response) = $this->accountOptionApiGetAccountCustomFieldsWithHttpInfo();
        return $response;
    }

    /**
     * Operation accountOptionApiGetAccountCustomFieldsWithHttpInfo
     *
     * 
     *
     * @return Array of \RevampCRM\Models\CustomFieldEntity[], HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function accountOptionApiGetAccountCustomFieldsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/api/1.0/Account/getAccountCustomFields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\CustomFieldEntity[]',
                '/api/1.0/Account/getAccountCustomFields'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\CustomFieldEntity[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\CustomFieldEntity[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountOptionApiGetContactStages
     *
     * 
     *
     * @return \RevampCRM\Models\ContactStageViewModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function accountOptionApiGetContactStages()
    {
        list($response) = $this->accountOptionApiGetContactStagesWithHttpInfo();
        return $response;
    }

    /**
     * Operation accountOptionApiGetContactStagesWithHttpInfo
     *
     * 
     *
     * @return Array of \RevampCRM\Models\ContactStageViewModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function accountOptionApiGetContactStagesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/api/1.0/Account/ContactStage";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\ContactStageViewModel',
                '/api/1.0/Account/ContactStage'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\ContactStageViewModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\ContactStageViewModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountOptionApiGetStages
     *
     * 
     *
     * @return \RevampCRM\Models\DealStageViewModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function accountOptionApiGetStages()
    {
        list($response) = $this->accountOptionApiGetStagesWithHttpInfo();
        return $response;
    }

    /**
     * Operation accountOptionApiGetStagesWithHttpInfo
     *
     * 
     *
     * @return Array of \RevampCRM\Models\DealStageViewModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function accountOptionApiGetStagesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/api/1.0/Account/DealStages";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\DealStageViewModel',
                '/api/1.0/Account/DealStages'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\DealStageViewModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\DealStageViewModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountOptionApiUpdateContactStages
     *
     * 
     *
     * @param string $stage1  (optional)
     * @param string $stage2  (optional)
     * @param string $stage3  (optional)
     * @param string $stage4  (optional)
     * @param string $stage5  (optional)
     * @param string $stage6  (optional)
     * @param string $stage7  (optional)
     * @param string $stage8  (optional)
     * @return \RevampCRM\Models\GenericObject
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function accountOptionApiUpdateContactStages($stage1 = null, $stage2 = null, $stage3 = null, $stage4 = null, $stage5 = null, $stage6 = null, $stage7 = null, $stage8 = null)
    {
        list($response) = $this->accountOptionApiUpdateContactStagesWithHttpInfo($stage1, $stage2, $stage3, $stage4, $stage5, $stage6, $stage7, $stage8);
        return $response;
    }

    /**
     * Operation accountOptionApiUpdateContactStagesWithHttpInfo
     *
     * 
     *
     * @param string $stage1  (optional)
     * @param string $stage2  (optional)
     * @param string $stage3  (optional)
     * @param string $stage4  (optional)
     * @param string $stage5  (optional)
     * @param string $stage6  (optional)
     * @param string $stage7  (optional)
     * @param string $stage8  (optional)
     * @return Array of \RevampCRM\Models\GenericObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function accountOptionApiUpdateContactStagesWithHttpInfo($stage1 = null, $stage2 = null, $stage3 = null, $stage4 = null, $stage5 = null, $stage6 = null, $stage7 = null, $stage8 = null)
    {
        // parse inputs
        $resourcePath = "/api/1.0/Account/UpdateContactStages";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($stage1 !== null) {
            $queryParams['stage1'] = $this->apiClient->getSerializer()->toQueryValue($stage1);
        }
        // query params
        if ($stage2 !== null) {
            $queryParams['stage2'] = $this->apiClient->getSerializer()->toQueryValue($stage2);
        }
        // query params
        if ($stage3 !== null) {
            $queryParams['stage3'] = $this->apiClient->getSerializer()->toQueryValue($stage3);
        }
        // query params
        if ($stage4 !== null) {
            $queryParams['stage4'] = $this->apiClient->getSerializer()->toQueryValue($stage4);
        }
        // query params
        if ($stage5 !== null) {
            $queryParams['stage5'] = $this->apiClient->getSerializer()->toQueryValue($stage5);
        }
        // query params
        if ($stage6 !== null) {
            $queryParams['stage6'] = $this->apiClient->getSerializer()->toQueryValue($stage6);
        }
        // query params
        if ($stage7 !== null) {
            $queryParams['stage7'] = $this->apiClient->getSerializer()->toQueryValue($stage7);
        }
        // query params
        if ($stage8 !== null) {
            $queryParams['stage8'] = $this->apiClient->getSerializer()->toQueryValue($stage8);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\GenericObject',
                '/api/1.0/Account/UpdateContactStages'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\GenericObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\GenericObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountOptionApiUpdateStages
     *
     * 
     *
     * @param string $stage1  (optional)
     * @param string $stage2  (optional)
     * @param string $stage3  (optional)
     * @param string $stage4  (optional)
     * @param string $stage5  (optional)
     * @return \RevampCRM\Models\GenericObject
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function accountOptionApiUpdateStages($stage1 = null, $stage2 = null, $stage3 = null, $stage4 = null, $stage5 = null)
    {
        list($response) = $this->accountOptionApiUpdateStagesWithHttpInfo($stage1, $stage2, $stage3, $stage4, $stage5);
        return $response;
    }

    /**
     * Operation accountOptionApiUpdateStagesWithHttpInfo
     *
     * 
     *
     * @param string $stage1  (optional)
     * @param string $stage2  (optional)
     * @param string $stage3  (optional)
     * @param string $stage4  (optional)
     * @param string $stage5  (optional)
     * @return Array of \RevampCRM\Models\GenericObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function accountOptionApiUpdateStagesWithHttpInfo($stage1 = null, $stage2 = null, $stage3 = null, $stage4 = null, $stage5 = null)
    {
        // parse inputs
        $resourcePath = "/api/1.0/Account/DealStagesUpdate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($stage1 !== null) {
            $queryParams['stage1'] = $this->apiClient->getSerializer()->toQueryValue($stage1);
        }
        // query params
        if ($stage2 !== null) {
            $queryParams['stage2'] = $this->apiClient->getSerializer()->toQueryValue($stage2);
        }
        // query params
        if ($stage3 !== null) {
            $queryParams['stage3'] = $this->apiClient->getSerializer()->toQueryValue($stage3);
        }
        // query params
        if ($stage4 !== null) {
            $queryParams['stage4'] = $this->apiClient->getSerializer()->toQueryValue($stage4);
        }
        // query params
        if ($stage5 !== null) {
            $queryParams['stage5'] = $this->apiClient->getSerializer()->toQueryValue($stage5);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\GenericObject',
                '/api/1.0/Account/DealStagesUpdate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\GenericObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\GenericObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
