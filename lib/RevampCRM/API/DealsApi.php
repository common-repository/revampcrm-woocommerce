<?php
/**
 * DealsApi
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\API;

use \RevampCRM\Client\Configuration;
use \RevampCRM\Client\ApiClient;
use \RevampCRM\Client\ApiException;
use \RevampCRM\Client\ObjectSerializer;

/**
 * DealsApi Class Doc Comment
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DealsApi
{

    /**
     * API Client
     *
     * @var \RevampCRM\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \RevampCRM\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\RevampCRM\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://app.revampcrm.com:443');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \RevampCRM\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \RevampCRM\Client\ApiClient $apiClient set the API client
     *
     * @return DealsApi
     */
    public function setApiClient(\RevampCRM\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation dealsChangestatus
     *
     * 
     *
     * @param string $id  (required)
     * @param string $status  (required)
     * @return void
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsChangestatus($id, $status)
    {
        list($response) = $this->dealsChangestatusWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation dealsChangestatusWithHttpInfo
     *
     * 
     *
     * @param string $id  (required)
     * @param string $status  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsChangestatusWithHttpInfo($id, $status)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling dealsChangestatus');
        }
        // verify the required parameter 'status' is set
        if ($status === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status when calling dealsChangestatus');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Deals/{id}/ChangeStatus/{status}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($status !== null) {
            $resourcePath = str_replace(
                "{" . "status" . "}",
                $this->apiClient->getSerializer()->toPathValue($status),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/api/1.0/Deals/{id}/ChangeStatus/{status}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation dealsCreateDeal
     *
     * 
     *
     * @param \RevampCRM\Models\DealEditViewModel $deal_view_model  (required)
     * @return \RevampCRM\Models\GenericObject
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsCreateDeal($deal_view_model)
    {
        list($response) = $this->dealsCreateDealWithHttpInfo($deal_view_model);
        return $response;
    }

    /**
     * Operation dealsCreateDealWithHttpInfo
     *
     * 
     *
     * @param \RevampCRM\Models\DealEditViewModel $deal_view_model  (required)
     * @return Array of \RevampCRM\Models\GenericObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsCreateDealWithHttpInfo($deal_view_model)
    {
        // verify the required parameter 'deal_view_model' is set
        if ($deal_view_model === null) {
            throw new \InvalidArgumentException('Missing the required parameter $deal_view_model when calling dealsCreateDeal');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Deals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded','text/csv','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet','application/vnd.ms-excel'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($deal_view_model)) {
            $_tempBody = $deal_view_model;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\GenericObject',
                '/api/1.0/Deals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\GenericObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\GenericObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dealsDealByStage
     *
     * Get Deals groups by Deal Stage
     *
     * @param string $type  (optional)
     * @param string $currentview  (optional)
     * @param string $userid  (optional)
     * @param string $status  (optional)
     * @param \DateTime $createdonstart  (optional)
     * @param \DateTime $createdonend  (optional)
     * @param \DateTime $expectedclosurestart  (optional)
     * @param \DateTime $expectedclosureend  (optional)
     * @param \DateTime $closedonstart  (optional)
     * @param \DateTime $closedonend  (optional)
     * @param string $timelinestartdate  (optional)
     * @param string $contactid  (optional)
     * @param string $productid  (optional)
     * @param string $salesregionid  (optional)
     * @param string $dealsourceid  (optional)
     * @param string $sortby  (optional)
     * @param string $sortdirection  (optional)
     * @return \RevampCRM\Models\DealByStageGroupViewModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsDealByStage($type = null, $currentview = null, $userid = null, $status = null, $createdonstart = null, $createdonend = null, $expectedclosurestart = null, $expectedclosureend = null, $closedonstart = null, $closedonend = null, $timelinestartdate = null, $contactid = null, $productid = null, $salesregionid = null, $dealsourceid = null, $sortby = null, $sortdirection = null)
    {
        list($response) = $this->dealsDealByStageWithHttpInfo($type, $currentview, $userid, $status, $createdonstart, $createdonend, $expectedclosurestart, $expectedclosureend, $closedonstart, $closedonend, $timelinestartdate, $contactid, $productid, $salesregionid, $dealsourceid, $sortby, $sortdirection);
        return $response;
    }

    /**
     * Operation dealsDealByStageWithHttpInfo
     *
     * Get Deals groups by Deal Stage
     *
     * @param string $type  (optional)
     * @param string $currentview  (optional)
     * @param string $userid  (optional)
     * @param string $status  (optional)
     * @param \DateTime $createdonstart  (optional)
     * @param \DateTime $createdonend  (optional)
     * @param \DateTime $expectedclosurestart  (optional)
     * @param \DateTime $expectedclosureend  (optional)
     * @param \DateTime $closedonstart  (optional)
     * @param \DateTime $closedonend  (optional)
     * @param string $timelinestartdate  (optional)
     * @param string $contactid  (optional)
     * @param string $productid  (optional)
     * @param string $salesregionid  (optional)
     * @param string $dealsourceid  (optional)
     * @param string $sortby  (optional)
     * @param string $sortdirection  (optional)
     * @return Array of \RevampCRM\Models\DealByStageGroupViewModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsDealByStageWithHttpInfo($type = null, $currentview = null, $userid = null, $status = null, $createdonstart = null, $createdonend = null, $expectedclosurestart = null, $expectedclosureend = null, $closedonstart = null, $closedonend = null, $timelinestartdate = null, $contactid = null, $productid = null, $salesregionid = null, $dealsourceid = null, $sortby = null, $sortdirection = null)
    {
        // parse inputs
        $resourcePath = "/api/1.0/Deals/ByStage";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($currentview !== null) {
            $queryParams['currentview'] = $this->apiClient->getSerializer()->toQueryValue($currentview);
        }
        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($createdonstart !== null) {
            $queryParams['createdonstart'] = $this->apiClient->getSerializer()->toQueryValue($createdonstart);
        }
        // query params
        if ($createdonend !== null) {
            $queryParams['createdonend'] = $this->apiClient->getSerializer()->toQueryValue($createdonend);
        }
        // query params
        if ($expectedclosurestart !== null) {
            $queryParams['expectedclosurestart'] = $this->apiClient->getSerializer()->toQueryValue($expectedclosurestart);
        }
        // query params
        if ($expectedclosureend !== null) {
            $queryParams['expectedclosureend'] = $this->apiClient->getSerializer()->toQueryValue($expectedclosureend);
        }
        // query params
        if ($closedonstart !== null) {
            $queryParams['closedonstart'] = $this->apiClient->getSerializer()->toQueryValue($closedonstart);
        }
        // query params
        if ($closedonend !== null) {
            $queryParams['closedonend'] = $this->apiClient->getSerializer()->toQueryValue($closedonend);
        }
        // query params
        if ($timelinestartdate !== null) {
            $queryParams['timelinestartdate'] = $this->apiClient->getSerializer()->toQueryValue($timelinestartdate);
        }
        // query params
        if ($contactid !== null) {
            $queryParams['contactid'] = $this->apiClient->getSerializer()->toQueryValue($contactid);
        }
        // query params
        if ($productid !== null) {
            $queryParams['productid'] = $this->apiClient->getSerializer()->toQueryValue($productid);
        }
        // query params
        if ($salesregionid !== null) {
            $queryParams['salesregionid'] = $this->apiClient->getSerializer()->toQueryValue($salesregionid);
        }
        // query params
        if ($dealsourceid !== null) {
            $queryParams['dealsourceid'] = $this->apiClient->getSerializer()->toQueryValue($dealsourceid);
        }
        // query params
        if ($sortby !== null) {
            $queryParams['sortby'] = $this->apiClient->getSerializer()->toQueryValue($sortby);
        }
        // query params
        if ($sortdirection !== null) {
            $queryParams['sortdirection'] = $this->apiClient->getSerializer()->toQueryValue($sortdirection);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\DealByStageGroupViewModel',
                '/api/1.0/Deals/ByStage'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\DealByStageGroupViewModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\DealByStageGroupViewModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dealsDealsList
     *
     * 
     *
     * @param string $type  (optional)
     * @param string $currentview  (optional)
     * @param string $userid  (optional)
     * @param string $status  (optional)
     * @param \DateTime $createdonstart  (optional)
     * @param \DateTime $createdonend  (optional)
     * @param \DateTime $expectedclosurestart  (optional)
     * @param \DateTime $expectedclosureend  (optional)
     * @param \DateTime $closedonstart  (optional)
     * @param \DateTime $closedonend  (optional)
     * @param string $timelinestartdate  (optional)
     * @param string $contactid  (optional)
     * @param string $productid  (optional)
     * @param string $salesregionid  (optional)
     * @param string $dealsourceid  (optional)
     * @param string $sortby  (optional)
     * @param string $sortdirection  (optional)
     * @return \RevampCRM\Models\DealsListViewModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsDealsList($type = null, $currentview = null, $userid = null, $status = null, $createdonstart = null, $createdonend = null, $expectedclosurestart = null, $expectedclosureend = null, $closedonstart = null, $closedonend = null, $timelinestartdate = null, $contactid = null, $productid = null, $salesregionid = null, $dealsourceid = null, $sortby = null, $sortdirection = null)
    {
        list($response) = $this->dealsDealsListWithHttpInfo($type, $currentview, $userid, $status, $createdonstart, $createdonend, $expectedclosurestart, $expectedclosureend, $closedonstart, $closedonend, $timelinestartdate, $contactid, $productid, $salesregionid, $dealsourceid, $sortby, $sortdirection);
        return $response;
    }

    /**
     * Operation dealsDealsListWithHttpInfo
     *
     * 
     *
     * @param string $type  (optional)
     * @param string $currentview  (optional)
     * @param string $userid  (optional)
     * @param string $status  (optional)
     * @param \DateTime $createdonstart  (optional)
     * @param \DateTime $createdonend  (optional)
     * @param \DateTime $expectedclosurestart  (optional)
     * @param \DateTime $expectedclosureend  (optional)
     * @param \DateTime $closedonstart  (optional)
     * @param \DateTime $closedonend  (optional)
     * @param string $timelinestartdate  (optional)
     * @param string $contactid  (optional)
     * @param string $productid  (optional)
     * @param string $salesregionid  (optional)
     * @param string $dealsourceid  (optional)
     * @param string $sortby  (optional)
     * @param string $sortdirection  (optional)
     * @return Array of \RevampCRM\Models\DealsListViewModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsDealsListWithHttpInfo($type = null, $currentview = null, $userid = null, $status = null, $createdonstart = null, $createdonend = null, $expectedclosurestart = null, $expectedclosureend = null, $closedonstart = null, $closedonend = null, $timelinestartdate = null, $contactid = null, $productid = null, $salesregionid = null, $dealsourceid = null, $sortby = null, $sortdirection = null)
    {
        // parse inputs
        $resourcePath = "/api/1.0/Deals/List/{UserId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($currentview !== null) {
            $queryParams['currentview'] = $this->apiClient->getSerializer()->toQueryValue($currentview);
        }
        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($createdonstart !== null) {
            $queryParams['createdonstart'] = $this->apiClient->getSerializer()->toQueryValue($createdonstart);
        }
        // query params
        if ($createdonend !== null) {
            $queryParams['createdonend'] = $this->apiClient->getSerializer()->toQueryValue($createdonend);
        }
        // query params
        if ($expectedclosurestart !== null) {
            $queryParams['expectedclosurestart'] = $this->apiClient->getSerializer()->toQueryValue($expectedclosurestart);
        }
        // query params
        if ($expectedclosureend !== null) {
            $queryParams['expectedclosureend'] = $this->apiClient->getSerializer()->toQueryValue($expectedclosureend);
        }
        // query params
        if ($closedonstart !== null) {
            $queryParams['closedonstart'] = $this->apiClient->getSerializer()->toQueryValue($closedonstart);
        }
        // query params
        if ($closedonend !== null) {
            $queryParams['closedonend'] = $this->apiClient->getSerializer()->toQueryValue($closedonend);
        }
        // query params
        if ($timelinestartdate !== null) {
            $queryParams['timelinestartdate'] = $this->apiClient->getSerializer()->toQueryValue($timelinestartdate);
        }
        // query params
        if ($contactid !== null) {
            $queryParams['contactid'] = $this->apiClient->getSerializer()->toQueryValue($contactid);
        }
        // query params
        if ($productid !== null) {
            $queryParams['productid'] = $this->apiClient->getSerializer()->toQueryValue($productid);
        }
        // query params
        if ($salesregionid !== null) {
            $queryParams['salesregionid'] = $this->apiClient->getSerializer()->toQueryValue($salesregionid);
        }
        // query params
        if ($dealsourceid !== null) {
            $queryParams['dealsourceid'] = $this->apiClient->getSerializer()->toQueryValue($dealsourceid);
        }
        // query params
        if ($sortby !== null) {
            $queryParams['sortby'] = $this->apiClient->getSerializer()->toQueryValue($sortby);
        }
        // query params
        if ($sortdirection !== null) {
            $queryParams['sortdirection'] = $this->apiClient->getSerializer()->toQueryValue($sortdirection);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\DealsListViewModel',
                '/api/1.0/Deals/List/{UserId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\DealsListViewModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\DealsListViewModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dealsDealsListWithFilters
     *
     * 
     *
     * @param string $filter  (required)
     * @param string $period_filter  (required)
     * @return \RevampCRM\Models\DealsListWithFiltersViewModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsDealsListWithFilters($filter, $period_filter)
    {
        list($response) = $this->dealsDealsListWithFiltersWithHttpInfo($filter, $period_filter);
        return $response;
    }

    /**
     * Operation dealsDealsListWithFiltersWithHttpInfo
     *
     * 
     *
     * @param string $filter  (required)
     * @param string $period_filter  (required)
     * @return Array of \RevampCRM\Models\DealsListWithFiltersViewModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsDealsListWithFiltersWithHttpInfo($filter, $period_filter)
    {
        // verify the required parameter 'filter' is set
        if ($filter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filter when calling dealsDealsListWithFilters');
        }
        // verify the required parameter 'period_filter' is set
        if ($period_filter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period_filter when calling dealsDealsListWithFilters');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Deals/ListWithFilters/{filter}/{periodFilter}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($filter !== null) {
            $resourcePath = str_replace(
                "{" . "filter" . "}",
                $this->apiClient->getSerializer()->toPathValue($filter),
                $resourcePath
            );
        }
        // path params
        if ($period_filter !== null) {
            $resourcePath = str_replace(
                "{" . "periodFilter" . "}",
                $this->apiClient->getSerializer()->toPathValue($period_filter),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\DealsListWithFiltersViewModel',
                '/api/1.0/Deals/ListWithFilters/{filter}/{periodFilter}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\DealsListWithFiltersViewModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\DealsListWithFiltersViewModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dealsDelete
     *
     * 
     *
     * @param string $deal_id  (required)
     * @return \RevampCRM\Models\GenericObject
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsDelete($deal_id)
    {
        list($response) = $this->dealsDeleteWithHttpInfo($deal_id);
        return $response;
    }

    /**
     * Operation dealsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $deal_id  (required)
     * @return Array of \RevampCRM\Models\GenericObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsDeleteWithHttpInfo($deal_id)
    {
        // verify the required parameter 'deal_id' is set
        if ($deal_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $deal_id when calling dealsDelete');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Deals/Delete/{dealId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($deal_id !== null) {
            $resourcePath = str_replace(
                "{" . "dealId" . "}",
                $this->apiClient->getSerializer()->toPathValue($deal_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\GenericObject',
                '/api/1.0/Deals/Delete/{dealId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\GenericObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\GenericObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dealsExportCurrentDeals
     *
     * 
     *
     * @param string $type  (optional)
     * @param string $currentview  (optional)
     * @param string $userid  (optional)
     * @param string $status  (optional)
     * @param \DateTime $createdonstart  (optional)
     * @param \DateTime $createdonend  (optional)
     * @param \DateTime $expectedclosurestart  (optional)
     * @param \DateTime $expectedclosureend  (optional)
     * @param \DateTime $closedonstart  (optional)
     * @param \DateTime $closedonend  (optional)
     * @param string $timelinestartdate  (optional)
     * @param string $contactid  (optional)
     * @param string $productid  (optional)
     * @param string $salesregionid  (optional)
     * @param string $dealsourceid  (optional)
     * @param string $sortby  (optional)
     * @param string $sortdirection  (optional)
     * @return \RevampCRM\Models\DealCSVViewModel[]
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsExportCurrentDeals($type = null, $currentview = null, $userid = null, $status = null, $createdonstart = null, $createdonend = null, $expectedclosurestart = null, $expectedclosureend = null, $closedonstart = null, $closedonend = null, $timelinestartdate = null, $contactid = null, $productid = null, $salesregionid = null, $dealsourceid = null, $sortby = null, $sortdirection = null)
    {
        list($response) = $this->dealsExportCurrentDealsWithHttpInfo($type, $currentview, $userid, $status, $createdonstart, $createdonend, $expectedclosurestart, $expectedclosureend, $closedonstart, $closedonend, $timelinestartdate, $contactid, $productid, $salesregionid, $dealsourceid, $sortby, $sortdirection);
        return $response;
    }

    /**
     * Operation dealsExportCurrentDealsWithHttpInfo
     *
     * 
     *
     * @param string $type  (optional)
     * @param string $currentview  (optional)
     * @param string $userid  (optional)
     * @param string $status  (optional)
     * @param \DateTime $createdonstart  (optional)
     * @param \DateTime $createdonend  (optional)
     * @param \DateTime $expectedclosurestart  (optional)
     * @param \DateTime $expectedclosureend  (optional)
     * @param \DateTime $closedonstart  (optional)
     * @param \DateTime $closedonend  (optional)
     * @param string $timelinestartdate  (optional)
     * @param string $contactid  (optional)
     * @param string $productid  (optional)
     * @param string $salesregionid  (optional)
     * @param string $dealsourceid  (optional)
     * @param string $sortby  (optional)
     * @param string $sortdirection  (optional)
     * @return Array of \RevampCRM\Models\DealCSVViewModel[], HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsExportCurrentDealsWithHttpInfo($type = null, $currentview = null, $userid = null, $status = null, $createdonstart = null, $createdonend = null, $expectedclosurestart = null, $expectedclosureend = null, $closedonstart = null, $closedonend = null, $timelinestartdate = null, $contactid = null, $productid = null, $salesregionid = null, $dealsourceid = null, $sortby = null, $sortdirection = null)
    {
        // parse inputs
        $resourcePath = "/api/1.0/Deals/ExportCurrentDeals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($currentview !== null) {
            $queryParams['currentview'] = $this->apiClient->getSerializer()->toQueryValue($currentview);
        }
        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($createdonstart !== null) {
            $queryParams['createdonstart'] = $this->apiClient->getSerializer()->toQueryValue($createdonstart);
        }
        // query params
        if ($createdonend !== null) {
            $queryParams['createdonend'] = $this->apiClient->getSerializer()->toQueryValue($createdonend);
        }
        // query params
        if ($expectedclosurestart !== null) {
            $queryParams['expectedclosurestart'] = $this->apiClient->getSerializer()->toQueryValue($expectedclosurestart);
        }
        // query params
        if ($expectedclosureend !== null) {
            $queryParams['expectedclosureend'] = $this->apiClient->getSerializer()->toQueryValue($expectedclosureend);
        }
        // query params
        if ($closedonstart !== null) {
            $queryParams['closedonstart'] = $this->apiClient->getSerializer()->toQueryValue($closedonstart);
        }
        // query params
        if ($closedonend !== null) {
            $queryParams['closedonend'] = $this->apiClient->getSerializer()->toQueryValue($closedonend);
        }
        // query params
        if ($timelinestartdate !== null) {
            $queryParams['timelinestartdate'] = $this->apiClient->getSerializer()->toQueryValue($timelinestartdate);
        }
        // query params
        if ($contactid !== null) {
            $queryParams['contactid'] = $this->apiClient->getSerializer()->toQueryValue($contactid);
        }
        // query params
        if ($productid !== null) {
            $queryParams['productid'] = $this->apiClient->getSerializer()->toQueryValue($productid);
        }
        // query params
        if ($salesregionid !== null) {
            $queryParams['salesregionid'] = $this->apiClient->getSerializer()->toQueryValue($salesregionid);
        }
        // query params
        if ($dealsourceid !== null) {
            $queryParams['dealsourceid'] = $this->apiClient->getSerializer()->toQueryValue($dealsourceid);
        }
        // query params
        if ($sortby !== null) {
            $queryParams['sortby'] = $this->apiClient->getSerializer()->toQueryValue($sortby);
        }
        // query params
        if ($sortdirection !== null) {
            $queryParams['sortdirection'] = $this->apiClient->getSerializer()->toQueryValue($sortdirection);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\DealCSVViewModel[]',
                '/api/1.0/Deals/ExportCurrentDeals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\DealCSVViewModel[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\DealCSVViewModel[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dealsExportCurrentDealsWithFilters
     *
     * Get List of Deals still in progress
     *
     * @param string $filter  (required)
     * @return \RevampCRM\Models\DealCSVViewModel[]
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsExportCurrentDealsWithFilters($filter)
    {
        list($response) = $this->dealsExportCurrentDealsWithFiltersWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation dealsExportCurrentDealsWithFiltersWithHttpInfo
     *
     * Get List of Deals still in progress
     *
     * @param string $filter  (required)
     * @return Array of \RevampCRM\Models\DealCSVViewModel[], HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsExportCurrentDealsWithFiltersWithHttpInfo($filter)
    {
        // verify the required parameter 'filter' is set
        if ($filter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filter when calling dealsExportCurrentDealsWithFilters');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Deals/ExportCurrentDealsWithFilters";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\DealCSVViewModel[]',
                '/api/1.0/Deals/ExportCurrentDealsWithFilters'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\DealCSVViewModel[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\DealCSVViewModel[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dealsExportLostDeals
     *
     * List of Lost Deals
     *
     * @return \RevampCRM\Models\DealCSVViewModel[]
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsExportLostDeals()
    {
        list($response) = $this->dealsExportLostDealsWithHttpInfo();
        return $response;
    }

    /**
     * Operation dealsExportLostDealsWithHttpInfo
     *
     * List of Lost Deals
     *
     * @return Array of \RevampCRM\Models\DealCSVViewModel[], HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsExportLostDealsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/api/1.0/Deals/ExportLostDeals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\DealCSVViewModel[]',
                '/api/1.0/Deals/ExportLostDeals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\DealCSVViewModel[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\DealCSVViewModel[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dealsExportWonDeals
     *
     * List of Won Deals
     *
     * @return \RevampCRM\Models\DealCSVViewModel[]
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsExportWonDeals()
    {
        list($response) = $this->dealsExportWonDealsWithHttpInfo();
        return $response;
    }

    /**
     * Operation dealsExportWonDealsWithHttpInfo
     *
     * List of Won Deals
     *
     * @return Array of \RevampCRM\Models\DealCSVViewModel[], HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsExportWonDealsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/api/1.0/Deals/ExportWonDeals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\DealCSVViewModel[]',
                '/api/1.0/Deals/ExportWonDeals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\DealCSVViewModel[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\DealCSVViewModel[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dealsMoveTo
     *
     * 
     *
     * @param string $move_type  (required)
     * @param string $deal_id  (required)
     * @param string $move_to  (required)
     * @return \RevampCRM\Models\ImportResultViewModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsMoveTo($move_type, $deal_id, $move_to)
    {
        list($response) = $this->dealsMoveToWithHttpInfo($move_type, $deal_id, $move_to);
        return $response;
    }

    /**
     * Operation dealsMoveToWithHttpInfo
     *
     * 
     *
     * @param string $move_type  (required)
     * @param string $deal_id  (required)
     * @param string $move_to  (required)
     * @return Array of \RevampCRM\Models\ImportResultViewModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsMoveToWithHttpInfo($move_type, $deal_id, $move_to)
    {
        // verify the required parameter 'move_type' is set
        if ($move_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $move_type when calling dealsMoveTo');
        }
        // verify the required parameter 'deal_id' is set
        if ($deal_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $deal_id when calling dealsMoveTo');
        }
        // verify the required parameter 'move_to' is set
        if ($move_to === null) {
            throw new \InvalidArgumentException('Missing the required parameter $move_to when calling dealsMoveTo');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Deals/{dealId}/Move/{moveType}/{moveTo}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($move_type !== null) {
            $resourcePath = str_replace(
                "{" . "moveType" . "}",
                $this->apiClient->getSerializer()->toPathValue($move_type),
                $resourcePath
            );
        }
        // path params
        if ($deal_id !== null) {
            $resourcePath = str_replace(
                "{" . "dealId" . "}",
                $this->apiClient->getSerializer()->toPathValue($deal_id),
                $resourcePath
            );
        }
        // path params
        if ($move_to !== null) {
            $resourcePath = str_replace(
                "{" . "moveTo" . "}",
                $this->apiClient->getSerializer()->toPathValue($move_to),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\ImportResultViewModel',
                '/api/1.0/Deals/{dealId}/Move/{moveType}/{moveTo}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\ImportResultViewModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\ImportResultViewModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dealsTimeLine
     *
     * Get Deals by TimeLine
     *
     * @param string $type  (optional)
     * @param string $currentview  (optional)
     * @param string $userid  (optional)
     * @param string $status  (optional)
     * @param \DateTime $createdonstart  (optional)
     * @param \DateTime $createdonend  (optional)
     * @param \DateTime $expectedclosurestart  (optional)
     * @param \DateTime $expectedclosureend  (optional)
     * @param \DateTime $closedonstart  (optional)
     * @param \DateTime $closedonend  (optional)
     * @param string $timelinestartdate  (optional)
     * @param string $contactid  (optional)
     * @param string $productid  (optional)
     * @param string $salesregionid  (optional)
     * @param string $dealsourceid  (optional)
     * @param string $sortby  (optional)
     * @param string $sortdirection  (optional)
     * @return \RevampCRM\Models\DealTimeLineGroupedViewModel
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsTimeLine($type = null, $currentview = null, $userid = null, $status = null, $createdonstart = null, $createdonend = null, $expectedclosurestart = null, $expectedclosureend = null, $closedonstart = null, $closedonend = null, $timelinestartdate = null, $contactid = null, $productid = null, $salesregionid = null, $dealsourceid = null, $sortby = null, $sortdirection = null)
    {
        list($response) = $this->dealsTimeLineWithHttpInfo($type, $currentview, $userid, $status, $createdonstart, $createdonend, $expectedclosurestart, $expectedclosureend, $closedonstart, $closedonend, $timelinestartdate, $contactid, $productid, $salesregionid, $dealsourceid, $sortby, $sortdirection);
        return $response;
    }

    /**
     * Operation dealsTimeLineWithHttpInfo
     *
     * Get Deals by TimeLine
     *
     * @param string $type  (optional)
     * @param string $currentview  (optional)
     * @param string $userid  (optional)
     * @param string $status  (optional)
     * @param \DateTime $createdonstart  (optional)
     * @param \DateTime $createdonend  (optional)
     * @param \DateTime $expectedclosurestart  (optional)
     * @param \DateTime $expectedclosureend  (optional)
     * @param \DateTime $closedonstart  (optional)
     * @param \DateTime $closedonend  (optional)
     * @param string $timelinestartdate  (optional)
     * @param string $contactid  (optional)
     * @param string $productid  (optional)
     * @param string $salesregionid  (optional)
     * @param string $dealsourceid  (optional)
     * @param string $sortby  (optional)
     * @param string $sortdirection  (optional)
     * @return Array of \RevampCRM\Models\DealTimeLineGroupedViewModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsTimeLineWithHttpInfo($type = null, $currentview = null, $userid = null, $status = null, $createdonstart = null, $createdonend = null, $expectedclosurestart = null, $expectedclosureend = null, $closedonstart = null, $closedonend = null, $timelinestartdate = null, $contactid = null, $productid = null, $salesregionid = null, $dealsourceid = null, $sortby = null, $sortdirection = null)
    {
        // parse inputs
        $resourcePath = "/api/1.0/Deals/TimeLine";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml', 'text/html', 'application/xhtml', 'application/xhtml+xml', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($currentview !== null) {
            $queryParams['currentview'] = $this->apiClient->getSerializer()->toQueryValue($currentview);
        }
        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($createdonstart !== null) {
            $queryParams['createdonstart'] = $this->apiClient->getSerializer()->toQueryValue($createdonstart);
        }
        // query params
        if ($createdonend !== null) {
            $queryParams['createdonend'] = $this->apiClient->getSerializer()->toQueryValue($createdonend);
        }
        // query params
        if ($expectedclosurestart !== null) {
            $queryParams['expectedclosurestart'] = $this->apiClient->getSerializer()->toQueryValue($expectedclosurestart);
        }
        // query params
        if ($expectedclosureend !== null) {
            $queryParams['expectedclosureend'] = $this->apiClient->getSerializer()->toQueryValue($expectedclosureend);
        }
        // query params
        if ($closedonstart !== null) {
            $queryParams['closedonstart'] = $this->apiClient->getSerializer()->toQueryValue($closedonstart);
        }
        // query params
        if ($closedonend !== null) {
            $queryParams['closedonend'] = $this->apiClient->getSerializer()->toQueryValue($closedonend);
        }
        // query params
        if ($timelinestartdate !== null) {
            $queryParams['timelinestartdate'] = $this->apiClient->getSerializer()->toQueryValue($timelinestartdate);
        }
        // query params
        if ($contactid !== null) {
            $queryParams['contactid'] = $this->apiClient->getSerializer()->toQueryValue($contactid);
        }
        // query params
        if ($productid !== null) {
            $queryParams['productid'] = $this->apiClient->getSerializer()->toQueryValue($productid);
        }
        // query params
        if ($salesregionid !== null) {
            $queryParams['salesregionid'] = $this->apiClient->getSerializer()->toQueryValue($salesregionid);
        }
        // query params
        if ($dealsourceid !== null) {
            $queryParams['dealsourceid'] = $this->apiClient->getSerializer()->toQueryValue($dealsourceid);
        }
        // query params
        if ($sortby !== null) {
            $queryParams['sortby'] = $this->apiClient->getSerializer()->toQueryValue($sortby);
        }
        // query params
        if ($sortdirection !== null) {
            $queryParams['sortdirection'] = $this->apiClient->getSerializer()->toQueryValue($sortdirection);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RevampCRM\Models\DealTimeLineGroupedViewModel',
                '/api/1.0/Deals/TimeLine'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RevampCRM\Models\DealTimeLineGroupedViewModel', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RevampCRM\Models\DealTimeLineGroupedViewModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dealsUpdateWon
     *
     * 
     *
     * @param \RevampCRM\Models\UpdateDealStatusModel $deal_info  (required)
     * @return void
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsUpdateWon($deal_info)
    {
        list($response) = $this->dealsUpdateWonWithHttpInfo($deal_info);
        return $response;
    }

    /**
     * Operation dealsUpdateWonWithHttpInfo
     *
     * 
     *
     * @param \RevampCRM\Models\UpdateDealStatusModel $deal_info  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsUpdateWonWithHttpInfo($deal_info)
    {
        // verify the required parameter 'deal_info' is set
        if ($deal_info === null) {
            throw new \InvalidArgumentException('Missing the required parameter $deal_info when calling dealsUpdateWon');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Deals/Won";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded','text/csv','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet','application/vnd.ms-excel'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($deal_info)) {
            $_tempBody = $deal_info;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/api/1.0/Deals/Won'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation dealsUpdatelost
     *
     * 
     *
     * @param \RevampCRM\Models\UpdateDealStatusModel $deal_info  (required)
     * @return void
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsUpdatelost($deal_info)
    {
        list($response) = $this->dealsUpdatelostWithHttpInfo($deal_info);
        return $response;
    }

    /**
     * Operation dealsUpdatelostWithHttpInfo
     *
     * 
     *
     * @param \RevampCRM\Models\UpdateDealStatusModel $deal_info  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RevampCRM\Client\ApiException on non-2xx response
     */
    public function dealsUpdatelostWithHttpInfo($deal_info)
    {
        // verify the required parameter 'deal_info' is set
        if ($deal_info === null) {
            throw new \InvalidArgumentException('Missing the required parameter $deal_info when calling dealsUpdatelost');
        }
        // parse inputs
        $resourcePath = "/api/1.0/Deals/Lost";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded','text/csv','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet','application/vnd.ms-excel'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($deal_info)) {
            $_tempBody = $deal_info;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/api/1.0/Deals/Lost'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
