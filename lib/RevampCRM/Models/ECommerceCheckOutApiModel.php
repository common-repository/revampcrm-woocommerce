<?php
/**
 * ECommerceCheckOutApiModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\Models;

use \ArrayAccess;

/**
 * ECommerceCheckOutApiModel Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RevampCRM\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ECommerceCheckOutApiModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ECommerceCheckOutApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'contact_id' => 'string',
        'provider_check_out_id' => 'string',
        'token' => 'string',
        'cart_token' => 'string',
        'buyer_accepts_marketing' => 'string',
        'created_on' => '\DateTime',
        'updated_on' => '\DateTime',
        'provider_store_id' => 'string',
        'subtotal_price' => 'double',
        'total_discounts' => 'double',
        'total_line_items_price' => 'double',
        'total_price' => 'double',
        'currency' => 'string',
        'num_of_lines' => 'int',
        'check_out_note' => 'string',
        'abandoned_checkout_url' => 'string',
        'num_of_items' => 'int',
        'line_items' => '\RevampCRM\Models\ECommerceCheckOutLineApiModel[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'contact_id' => 'ContactId',
        'provider_check_out_id' => 'ProviderCheckOutId',
        'token' => 'token',
        'cart_token' => 'cart_token',
        'buyer_accepts_marketing' => 'BuyerAcceptsMarketing',
        'created_on' => 'CreatedOn',
        'updated_on' => 'UpdatedOn',
        'provider_store_id' => 'ProviderStoreId',
        'subtotal_price' => 'subtotal_price',
        'total_discounts' => 'total_discounts',
        'total_line_items_price' => 'total_line_items_price',
        'total_price' => 'total_price',
        'currency' => 'Currency',
        'num_of_lines' => 'NumOfLines',
        'check_out_note' => 'CheckOutNote',
        'abandoned_checkout_url' => 'abandoned_checkout_url',
        'num_of_items' => 'NumOfItems',
        'line_items' => 'LineItems'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'contact_id' => 'setContactId',
        'provider_check_out_id' => 'setProviderCheckOutId',
        'token' => 'setToken',
        'cart_token' => 'setCartToken',
        'buyer_accepts_marketing' => 'setBuyerAcceptsMarketing',
        'created_on' => 'setCreatedOn',
        'updated_on' => 'setUpdatedOn',
        'provider_store_id' => 'setProviderStoreId',
        'subtotal_price' => 'setSubtotalPrice',
        'total_discounts' => 'setTotalDiscounts',
        'total_line_items_price' => 'setTotalLineItemsPrice',
        'total_price' => 'setTotalPrice',
        'currency' => 'setCurrency',
        'num_of_lines' => 'setNumOfLines',
        'check_out_note' => 'setCheckOutNote',
        'abandoned_checkout_url' => 'setAbandonedCheckoutUrl',
        'num_of_items' => 'setNumOfItems',
        'line_items' => 'setLineItems'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'contact_id' => 'getContactId',
        'provider_check_out_id' => 'getProviderCheckOutId',
        'token' => 'getToken',
        'cart_token' => 'getCartToken',
        'buyer_accepts_marketing' => 'getBuyerAcceptsMarketing',
        'created_on' => 'getCreatedOn',
        'updated_on' => 'getUpdatedOn',
        'provider_store_id' => 'getProviderStoreId',
        'subtotal_price' => 'getSubtotalPrice',
        'total_discounts' => 'getTotalDiscounts',
        'total_line_items_price' => 'getTotalLineItemsPrice',
        'total_price' => 'getTotalPrice',
        'currency' => 'getCurrency',
        'num_of_lines' => 'getNumOfLines',
        'check_out_note' => 'getCheckOutNote',
        'abandoned_checkout_url' => 'getAbandonedCheckoutUrl',
        'num_of_items' => 'getNumOfItems',
        'line_items' => 'getLineItems'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['provider_check_out_id'] = isset($data['provider_check_out_id']) ? $data['provider_check_out_id'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['cart_token'] = isset($data['cart_token']) ? $data['cart_token'] : null;
        $this->container['buyer_accepts_marketing'] = isset($data['buyer_accepts_marketing']) ? $data['buyer_accepts_marketing'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['updated_on'] = isset($data['updated_on']) ? $data['updated_on'] : null;
        $this->container['provider_store_id'] = isset($data['provider_store_id']) ? $data['provider_store_id'] : null;
        $this->container['subtotal_price'] = isset($data['subtotal_price']) ? $data['subtotal_price'] : null;
        $this->container['total_discounts'] = isset($data['total_discounts']) ? $data['total_discounts'] : null;
        $this->container['total_line_items_price'] = isset($data['total_line_items_price']) ? $data['total_line_items_price'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['num_of_lines'] = isset($data['num_of_lines']) ? $data['num_of_lines'] : null;
        $this->container['check_out_note'] = isset($data['check_out_note']) ? $data['check_out_note'] : null;
        $this->container['abandoned_checkout_url'] = isset($data['abandoned_checkout_url']) ? $data['abandoned_checkout_url'] : null;
        $this->container['num_of_items'] = isset($data['num_of_items']) ? $data['num_of_items'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets contact_id
     * @return string
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     * @param string $contact_id
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets provider_check_out_id
     * @return string
     */
    public function getProviderCheckOutId()
    {
        return $this->container['provider_check_out_id'];
    }

    /**
     * Sets provider_check_out_id
     * @param string $provider_check_out_id
     * @return $this
     */
    public function setProviderCheckOutId($provider_check_out_id)
    {
        $this->container['provider_check_out_id'] = $provider_check_out_id;

        return $this;
    }

    /**
     * Gets token
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     * @param string $token
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets cart_token
     * @return string
     */
    public function getCartToken()
    {
        return $this->container['cart_token'];
    }

    /**
     * Sets cart_token
     * @param string $cart_token
     * @return $this
     */
    public function setCartToken($cart_token)
    {
        $this->container['cart_token'] = $cart_token;

        return $this;
    }

    /**
     * Gets buyer_accepts_marketing
     * @return string
     */
    public function getBuyerAcceptsMarketing()
    {
        return $this->container['buyer_accepts_marketing'];
    }

    /**
     * Sets buyer_accepts_marketing
     * @param string $buyer_accepts_marketing
     * @return $this
     */
    public function setBuyerAcceptsMarketing($buyer_accepts_marketing)
    {
        $this->container['buyer_accepts_marketing'] = $buyer_accepts_marketing;

        return $this;
    }

    /**
     * Gets created_on
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     * @param \DateTime $created_on
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets updated_on
     * @return \DateTime
     */
    public function getUpdatedOn()
    {
        return $this->container['updated_on'];
    }

    /**
     * Sets updated_on
     * @param \DateTime $updated_on
     * @return $this
     */
    public function setUpdatedOn($updated_on)
    {
        $this->container['updated_on'] = $updated_on;

        return $this;
    }

    /**
     * Gets provider_store_id
     * @return string
     */
    public function getProviderStoreId()
    {
        return $this->container['provider_store_id'];
    }

    /**
     * Sets provider_store_id
     * @param string $provider_store_id
     * @return $this
     */
    public function setProviderStoreId($provider_store_id)
    {
        $this->container['provider_store_id'] = $provider_store_id;

        return $this;
    }

    /**
     * Gets subtotal_price
     * @return double
     */
    public function getSubtotalPrice()
    {
        return $this->container['subtotal_price'];
    }

    /**
     * Sets subtotal_price
     * @param double $subtotal_price
     * @return $this
     */
    public function setSubtotalPrice($subtotal_price)
    {
        $this->container['subtotal_price'] = $subtotal_price;

        return $this;
    }

    /**
     * Gets total_discounts
     * @return double
     */
    public function getTotalDiscounts()
    {
        return $this->container['total_discounts'];
    }

    /**
     * Sets total_discounts
     * @param double $total_discounts
     * @return $this
     */
    public function setTotalDiscounts($total_discounts)
    {
        $this->container['total_discounts'] = $total_discounts;

        return $this;
    }

    /**
     * Gets total_line_items_price
     * @return double
     */
    public function getTotalLineItemsPrice()
    {
        return $this->container['total_line_items_price'];
    }

    /**
     * Sets total_line_items_price
     * @param double $total_line_items_price
     * @return $this
     */
    public function setTotalLineItemsPrice($total_line_items_price)
    {
        $this->container['total_line_items_price'] = $total_line_items_price;

        return $this;
    }

    /**
     * Gets total_price
     * @return double
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     * @param double $total_price
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets num_of_lines
     * @return int
     */
    public function getNumOfLines()
    {
        return $this->container['num_of_lines'];
    }

    /**
     * Sets num_of_lines
     * @param int $num_of_lines
     * @return $this
     */
    public function setNumOfLines($num_of_lines)
    {
        $this->container['num_of_lines'] = $num_of_lines;

        return $this;
    }

    /**
     * Gets check_out_note
     * @return string
     */
    public function getCheckOutNote()
    {
        return $this->container['check_out_note'];
    }

    /**
     * Sets check_out_note
     * @param string $check_out_note
     * @return $this
     */
    public function setCheckOutNote($check_out_note)
    {
        $this->container['check_out_note'] = $check_out_note;

        return $this;
    }

    /**
     * Gets abandoned_checkout_url
     * @return string
     */
    public function getAbandonedCheckoutUrl()
    {
        return $this->container['abandoned_checkout_url'];
    }

    /**
     * Sets abandoned_checkout_url
     * @param string $abandoned_checkout_url
     * @return $this
     */
    public function setAbandonedCheckoutUrl($abandoned_checkout_url)
    {
        $this->container['abandoned_checkout_url'] = $abandoned_checkout_url;

        return $this;
    }

    /**
     * Gets num_of_items
     * @return int
     */
    public function getNumOfItems()
    {
        return $this->container['num_of_items'];
    }

    /**
     * Sets num_of_items
     * @param int $num_of_items
     * @return $this
     */
    public function setNumOfItems($num_of_items)
    {
        $this->container['num_of_items'] = $num_of_items;

        return $this;
    }

    /**
     * Gets line_items
     * @return \RevampCRM\Models\ECommerceCheckOutLineApiModel[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     * @param \RevampCRM\Models\ECommerceCheckOutLineApiModel[] $line_items
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


