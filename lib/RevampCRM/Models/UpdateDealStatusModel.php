<?php
/**
 * UpdateDealStatusModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\Models;

use \ArrayAccess;

/**
 * UpdateDealStatusModel Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RevampCRM\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UpdateDealStatusModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UpdateDealStatusModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'deal_id' => 'string',
        'reson' => 'string',
        'notify' => 'string',
        'note' => 'string',
        'task_dueon' => 'string',
        'refrence_id' => 'string',
        'invoice_due_on' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'deal_id' => 'dealId',
        'reson' => 'reson',
        'notify' => 'Notify',
        'note' => 'Note',
        'task_dueon' => 'TaskDueon',
        'refrence_id' => 'RefrenceId',
        'invoice_due_on' => 'InvoiceDueOn'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'deal_id' => 'setDealId',
        'reson' => 'setReson',
        'notify' => 'setNotify',
        'note' => 'setNote',
        'task_dueon' => 'setTaskDueon',
        'refrence_id' => 'setRefrenceId',
        'invoice_due_on' => 'setInvoiceDueOn'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'deal_id' => 'getDealId',
        'reson' => 'getReson',
        'notify' => 'getNotify',
        'note' => 'getNote',
        'task_dueon' => 'getTaskDueon',
        'refrence_id' => 'getRefrenceId',
        'invoice_due_on' => 'getInvoiceDueOn'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deal_id'] = isset($data['deal_id']) ? $data['deal_id'] : null;
        $this->container['reson'] = isset($data['reson']) ? $data['reson'] : null;
        $this->container['notify'] = isset($data['notify']) ? $data['notify'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['task_dueon'] = isset($data['task_dueon']) ? $data['task_dueon'] : null;
        $this->container['refrence_id'] = isset($data['refrence_id']) ? $data['refrence_id'] : null;
        $this->container['invoice_due_on'] = isset($data['invoice_due_on']) ? $data['invoice_due_on'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets deal_id
     * @return string
     */
    public function getDealId()
    {
        return $this->container['deal_id'];
    }

    /**
     * Sets deal_id
     * @param string $deal_id
     * @return $this
     */
    public function setDealId($deal_id)
    {
        $this->container['deal_id'] = $deal_id;

        return $this;
    }

    /**
     * Gets reson
     * @return string
     */
    public function getReson()
    {
        return $this->container['reson'];
    }

    /**
     * Sets reson
     * @param string $reson
     * @return $this
     */
    public function setReson($reson)
    {
        $this->container['reson'] = $reson;

        return $this;
    }

    /**
     * Gets notify
     * @return string
     */
    public function getNotify()
    {
        return $this->container['notify'];
    }

    /**
     * Sets notify
     * @param string $notify
     * @return $this
     */
    public function setNotify($notify)
    {
        $this->container['notify'] = $notify;

        return $this;
    }

    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     * @param string $note
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets task_dueon
     * @return string
     */
    public function getTaskDueon()
    {
        return $this->container['task_dueon'];
    }

    /**
     * Sets task_dueon
     * @param string $task_dueon
     * @return $this
     */
    public function setTaskDueon($task_dueon)
    {
        $this->container['task_dueon'] = $task_dueon;

        return $this;
    }

    /**
     * Gets refrence_id
     * @return string
     */
    public function getRefrenceId()
    {
        return $this->container['refrence_id'];
    }

    /**
     * Sets refrence_id
     * @param string $refrence_id
     * @return $this
     */
    public function setRefrenceId($refrence_id)
    {
        $this->container['refrence_id'] = $refrence_id;

        return $this;
    }

    /**
     * Gets invoice_due_on
     * @return string
     */
    public function getInvoiceDueOn()
    {
        return $this->container['invoice_due_on'];
    }

    /**
     * Sets invoice_due_on
     * @param string $invoice_due_on
     * @return $this
     */
    public function setInvoiceDueOn($invoice_due_on)
    {
        $this->container['invoice_due_on'] = $invoice_due_on;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


