<?php
/**
 * ECommerceStoreApiModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\Models;

use \ArrayAccess;

/**
 * ECommerceStoreApiModel Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RevampCRM\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ECommerceStoreApiModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ECommerceStoreApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        '_id' => 'string',
        'account_id' => 'string',
        'contact_id' => 'string',
        'created_on' => '\DateTime',
        'updated_on' => '\DateTime',
        'title' => 'string',
        'description' => 'string',
        'access_token' => 'string',
        'provider_name' => 'string',
        'store_id' => 'string',
        'last_shopify_sync_date' => 'string',
        'store_email' => 'string',
        'store_domain' => 'string',
        'uninstall' => 'bool',
        'province_name' => 'string',
        'province_code' => 'string',
        'address1' => 'string',
        'zip' => 'string',
        'city' => 'string',
        'store_phone' => 'string',
        'country_code' => 'string',
        'country_name' => 'string',
        'store_display_name' => 'string',
        'store_name' => 'string',
        'store_address' => 'string',
        'time_zone' => 'string',
        'is_deleted' => 'bool',
        'is_syncing' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        '_id' => '_id',
        'account_id' => 'AccountId',
        'contact_id' => 'ContactId',
        'created_on' => 'CreatedOn',
        'updated_on' => 'UpdatedOn',
        'title' => 'Title',
        'description' => 'Description',
        'access_token' => 'AccessToken',
        'provider_name' => 'ProviderName',
        'store_id' => 'StoreId',
        'last_shopify_sync_date' => 'LastShopifySyncDate',
        'store_email' => 'StoreEmail',
        'store_domain' => 'StoreDomain',
        'uninstall' => 'Uninstall',
        'province_name' => 'ProvinceName',
        'province_code' => 'ProvinceCode',
        'address1' => 'Address1',
        'zip' => 'Zip',
        'city' => 'City',
        'store_phone' => 'StorePhone',
        'country_code' => 'CountryCode',
        'country_name' => 'CountryName',
        'store_display_name' => 'StoreDisplayName',
        'store_name' => 'StoreName',
        'store_address' => 'StoreAddress',
        'is_deleted' => 'IsDeleted',
        'is_syncing' => 'IsSyncing',
        'time_zone' => 'TimeZone'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        '_id' => 'setId',
        'account_id' => 'setAccountId',
        'contact_id' => 'setContactId',
        'created_on' => 'setCreatedOn',
        'updated_on' => 'setUpdatedOn',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'time_zone' => 'setTimeZone',
        'access_token' => 'setAccessToken',
        'provider_name' => 'setProviderName',
        'store_id' => 'setStoreId',
        'last_shopify_sync_date' => 'setLastShopifySyncDate',
        'store_email' => 'setStoreEmail',
        'store_domain' => 'setStoreDomain',
        'uninstall' => 'setUninstall',
        'province_name' => 'setProvinceName',
        'province_code' => 'setProvinceCode',
        'address1' => 'setAddress1',
        'zip' => 'setZip',
        'city' => 'setCity',
        'store_phone' => 'setStorePhone',
        'country_code' => 'setCountryCode',
        'country_name' => 'setCountryName',
        'store_display_name' => 'setStoreDisplayName',
        'store_name' => 'setStoreName',
        'store_address' => 'setStoreAddress',
        'is_syncing' => 'setIsSyncing',
        'is_deleted' => 'setIsDeleted'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        '_id' => 'getId',
        'account_id' => 'getAccountId',
        'contact_id' => 'getContactId',
        'created_on' => 'getCreatedOn',
        'updated_on' => 'getUpdatedOn',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'access_token' => 'getAccessToken',
        'provider_name' => 'getProviderName',
        'store_id' => 'getStoreId',
        'last_shopify_sync_date' => 'getLastShopifySyncDate',
        'store_email' => 'getStoreEmail',
        'store_domain' => 'getStoreDomain',
        'uninstall' => 'getUninstall',
        'province_name' => 'getProvinceName',
        'province_code' => 'getProvinceCode',
        'address1' => 'getAddress1',
        'zip' => 'getZip',
        'city' => 'getCity',
        'store_phone' => 'getStorePhone',
        'country_code' => 'getCountryCode',
        'country_name' => 'getCountryName',
        'store_display_name' => 'getStoreDisplayName',
        'store_name' => 'getStoreName',
        'store_address' => 'getStoreAddress',
        'is_deleted' => 'getIsDeleted',
        'is_syncing' => 'getIsSyncing',
        'time_zone' => 'getTimeZone'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['updated_on'] = isset($data['updated_on']) ? $data['updated_on'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['access_token'] = isset($data['access_token']) ? $data['access_token'] : null;
        $this->container['provider_name'] = isset($data['provider_name']) ? $data['provider_name'] : null;
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['last_shopify_sync_date'] = isset($data['last_shopify_sync_date']) ? $data['last_shopify_sync_date'] : null;
        $this->container['store_email'] = isset($data['store_email']) ? $data['store_email'] : null;
        $this->container['store_domain'] = isset($data['store_domain']) ? $data['store_domain'] : null;
        $this->container['uninstall'] = isset($data['uninstall']) ? $data['uninstall'] : null;
        $this->container['province_name'] = isset($data['province_name']) ? $data['province_name'] : null;
        $this->container['province_code'] = isset($data['province_code']) ? $data['province_code'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['store_phone'] = isset($data['store_phone']) ? $data['store_phone'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['country_name'] = isset($data['country_name']) ? $data['country_name'] : null;
        $this->container['store_display_name'] = isset($data['store_display_name']) ? $data['store_display_name'] : null;
        $this->container['store_name'] = isset($data['store_name']) ? $data['store_name'] : null;
        $this->container['store_address'] = isset($data['store_address']) ? $data['store_address'] : null;
        $this->container['is_deleted'] = isset($data['is_deleted']) ? $data['is_deleted'] : null;
        $this->container['is_syncing'] = isset($data['is_syncing']) ? $data['is_syncing'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets _id
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     * @param string $_id
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets account_id
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param string $account_id
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_id
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets account_id
     * @param string $account_id
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets contact_id
     * @return string
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     * @param string $contact_id
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets created_on
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     * @param \DateTime $created_on
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets updated_on
     * @return \DateTime
     */
    public function getUpdatedOn()
    {
        return $this->container['updated_on'];
    }

    /**
     * Sets updated_on
     * @param \DateTime $updated_on
     * @return $this
     */
    public function setUpdatedOn($updated_on)
    {
        $this->container['updated_on'] = $updated_on;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets access_token
     * @return string
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     * @param string $access_token
     * @return $this
     */
    public function setAccessToken($access_token)
    {
        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets provider_name
     * @return string
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     * @param string $provider_name
     * @return $this
     */
    public function setProviderName($provider_name)
    {
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets store_id
     * @return string
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     * @param string $store_id
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets last_shopify_sync_date
     * @return string
     */
    public function getLastShopifySyncDate()
    {
        return $this->container['last_shopify_sync_date'];
    }

    /**
     * Sets last_shopify_sync_date
     * @param string $last_shopify_sync_date
     * @return $this
     */
    public function setLastShopifySyncDate($last_shopify_sync_date)
    {
        $this->container['last_shopify_sync_date'] = $last_shopify_sync_date;

        return $this;
    }

    /**
     * Gets store_email
     * @return string
     */
    public function getStoreEmail()
    {
        return $this->container['store_email'];
    }

    /**
     * Sets store_email
     * @param string $store_email
     * @return $this
     */
    public function setStoreEmail($store_email)
    {
        $this->container['store_email'] = $store_email;

        return $this;
    }

    /**
     * Gets store_domain
     * @return string
     */
    public function getStoreDomain()
    {
        return $this->container['store_domain'];
    }

    /**
     * Sets store_domain
     * @param string $store_domain
     * @return $this
     */
    public function setStoreDomain($store_domain)
    {
        $this->container['store_domain'] = $store_domain;

        return $this;
    }

    /**
     * Gets uninstall
     * @return bool
     */
    public function getUninstall()
    {
        return $this->container['uninstall'];
    }

    /**
     * Sets uninstall
     * @param bool $uninstall
     * @return $this
     */
    public function setUninstall($uninstall)
    {
        $this->container['uninstall'] = $uninstall;

        return $this;
    }

    /**
     * Gets province_name
     * @return string
     */
    public function getProvinceName()
    {
        return $this->container['province_name'];
    }

    /**
     * Sets province_name
     * @param string $province_name
     * @return $this
     */
    public function setProvinceName($province_name)
    {
        $this->container['province_name'] = $province_name;

        return $this;
    }

    /**
     * Gets province_code
     * @return string
     */
    public function getProvinceCode()
    {
        return $this->container['province_code'];
    }

    /**
     * Sets province_code
     * @param string $province_code
     * @return $this
     */
    public function setProvinceCode($province_code)
    {
        $this->container['province_code'] = $province_code;

        return $this;
    }

    /**
     * Gets address1
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     * @param string $address1
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets zip
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     * @param string $zip
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets store_phone
     * @return string
     */
    public function getStorePhone()
    {
        return $this->container['store_phone'];
    }

    /**
     * Sets store_phone
     * @param string $store_phone
     * @return $this
     */
    public function setStorePhone($store_phone)
    {
        $this->container['store_phone'] = $store_phone;

        return $this;
    }

    /**
     * Gets country_code
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     * @param string $country_code
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets country_name
     * @return string
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     * @param string $country_name
     * @return $this
     */
    public function setCountryName($country_name)
    {
        $this->container['country_name'] = $country_name;

        return $this;
    }

    /**
     * Gets store_display_name
     * @return string
     */
    public function getStoreDisplayName()
    {
        return $this->container['store_display_name'];
    }

    /**
     * Sets store_display_name
     * @param string $store_display_name
     * @return $this
     */
    public function setStoreDisplayName($store_display_name)
    {
        $this->container['store_display_name'] = $store_display_name;

        return $this;
    }

        /**
     * Gets store_name
     * @return string
     */
    public function getStoreName()
    {
        return $this->container['store_name'];
    }

    /**
     * Sets store_name
     * @param string $store_name
     * @return $this
     */
    public function setStoreName($store_name)
    {
        $this->container['store_name'] = $store_name;

        return $this;
    }

    /**
     * Gets store_address
     * @return string
     */
    public function getStoreAddress()
    {
        return $this->container['store_address'];
    }

    /**
     * Sets store_address
     * @param string $store_address
     * @return $this
     */
    public function setStoreAddress($store_address)
    {
        $this->container['store_address'] = $store_address;

        return $this;
    }

    /**
     * Gets is_deleted
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     * @param bool $is_deleted
     * @return $this
     */
    public function setIsDeleted($is_deleted)
    {
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

        /**
     * Gets is_syncing
     * @return bool
     */
    public function getIsSyncing()
    {
        return $this->container['is_syncing'];
    }

    /**
     * Sets is_deleted
     * @param bool $is_deleted
     * @return $this
     */
    public function setIsSyncing($is_syncing)
    {
        $this->container['is_syncing'] = $is_syncing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


