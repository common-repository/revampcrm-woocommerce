<?php
/**
 * ContactInfoViewModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\Models;

use \ArrayAccess;

/**
 * ContactInfoViewModel Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RevampCRM\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ContactInfoViewModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ContactInfoViewModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'address' => '\RevampCRM\Models\AddressViewModel',
        'primary_email' => 'string',
        'primary_phone_number' => 'string',
        'secondary_email' => 'string',
        'twitter' => 'string',
        'skype' => 'string',
        'facebook' => 'string',
        'linked_in' => 'string',
        'secondary_phone_number' => 'string',
        'website' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'address' => 'Address',
        'primary_email' => 'PrimaryEmail',
        'primary_phone_number' => 'PrimaryPhoneNumber',
        'secondary_email' => 'SecondaryEmail',
        'twitter' => 'Twitter',
        'skype' => 'skype',
        'facebook' => 'Facebook',
        'linked_in' => 'LinkedIn',
        'secondary_phone_number' => 'SecondaryPhoneNumber',
        'website' => 'Website'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'address' => 'setAddress',
        'primary_email' => 'setPrimaryEmail',
        'primary_phone_number' => 'setPrimaryPhoneNumber',
        'secondary_email' => 'setSecondaryEmail',
        'twitter' => 'setTwitter',
        'skype' => 'setSkype',
        'facebook' => 'setFacebook',
        'linked_in' => 'setLinkedIn',
        'secondary_phone_number' => 'setSecondaryPhoneNumber',
        'website' => 'setWebsite'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'address' => 'getAddress',
        'primary_email' => 'getPrimaryEmail',
        'primary_phone_number' => 'getPrimaryPhoneNumber',
        'secondary_email' => 'getSecondaryEmail',
        'twitter' => 'getTwitter',
        'skype' => 'getSkype',
        'facebook' => 'getFacebook',
        'linked_in' => 'getLinkedIn',
        'secondary_phone_number' => 'getSecondaryPhoneNumber',
        'website' => 'getWebsite'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['primary_email'] = isset($data['primary_email']) ? $data['primary_email'] : null;
        $this->container['primary_phone_number'] = isset($data['primary_phone_number']) ? $data['primary_phone_number'] : null;
        $this->container['secondary_email'] = isset($data['secondary_email']) ? $data['secondary_email'] : null;
        $this->container['twitter'] = isset($data['twitter']) ? $data['twitter'] : null;
        $this->container['skype'] = isset($data['skype']) ? $data['skype'] : null;
        $this->container['facebook'] = isset($data['facebook']) ? $data['facebook'] : null;
        $this->container['linked_in'] = isset($data['linked_in']) ? $data['linked_in'] : null;
        $this->container['secondary_phone_number'] = isset($data['secondary_phone_number']) ? $data['secondary_phone_number'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets address
     * @return \RevampCRM\Models\AddressViewModel
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param \RevampCRM\Models\AddressViewModel $address
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets primary_email
     * @return string
     */
    public function getPrimaryEmail()
    {
        return $this->container['primary_email'];
    }

    /**
     * Sets primary_email
     * @param string $primary_email
     * @return $this
     */
    public function setPrimaryEmail($primary_email)
    {
        $this->container['primary_email'] = $primary_email;

        return $this;
    }

    /**
     * Gets primary_phone_number
     * @return string
     */
    public function getPrimaryPhoneNumber()
    {
        return $this->container['primary_phone_number'];
    }

    /**
     * Sets primary_phone_number
     * @param string $primary_phone_number
     * @return $this
     */
    public function setPrimaryPhoneNumber($primary_phone_number)
    {
        $this->container['primary_phone_number'] = $primary_phone_number;

        return $this;
    }

    /**
     * Gets secondary_email
     * @return string
     */
    public function getSecondaryEmail()
    {
        return $this->container['secondary_email'];
    }

    /**
     * Sets secondary_email
     * @param string $secondary_email
     * @return $this
     */
    public function setSecondaryEmail($secondary_email)
    {
        $this->container['secondary_email'] = $secondary_email;

        return $this;
    }

    /**
     * Gets twitter
     * @return string
     */
    public function getTwitter()
    {
        return $this->container['twitter'];
    }

    /**
     * Sets twitter
     * @param string $twitter
     * @return $this
     */
    public function setTwitter($twitter)
    {
        $this->container['twitter'] = $twitter;

        return $this;
    }

    /**
     * Gets skype
     * @return string
     */
    public function getSkype()
    {
        return $this->container['skype'];
    }

    /**
     * Sets skype
     * @param string $skype
     * @return $this
     */
    public function setSkype($skype)
    {
        $this->container['skype'] = $skype;

        return $this;
    }

    /**
     * Gets facebook
     * @return string
     */
    public function getFacebook()
    {
        return $this->container['facebook'];
    }

    /**
     * Sets facebook
     * @param string $facebook
     * @return $this
     */
    public function setFacebook($facebook)
    {
        $this->container['facebook'] = $facebook;

        return $this;
    }

    /**
     * Gets linked_in
     * @return string
     */
    public function getLinkedIn()
    {
        return $this->container['linked_in'];
    }

    /**
     * Sets linked_in
     * @param string $linked_in
     * @return $this
     */
    public function setLinkedIn($linked_in)
    {
        $this->container['linked_in'] = $linked_in;

        return $this;
    }

    /**
     * Gets secondary_phone_number
     * @return string
     */
    public function getSecondaryPhoneNumber()
    {
        return $this->container['secondary_phone_number'];
    }

    /**
     * Sets secondary_phone_number
     * @param string $secondary_phone_number
     * @return $this
     */
    public function setSecondaryPhoneNumber($secondary_phone_number)
    {
        $this->container['secondary_phone_number'] = $secondary_phone_number;

        return $this;
    }

    /**
     * Gets website
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     * @param string $website
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


