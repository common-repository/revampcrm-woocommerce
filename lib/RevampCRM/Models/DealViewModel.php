<?php
/**
 * DealViewModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\Models;

use \ArrayAccess;

/**
 * DealViewModel Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RevampCRM\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DealViewModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DealViewModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        '_id' => 'string',
        'account_id' => 'string',
        'attachments' => '\RevampCRM\Models\AttachmentSummary[]',
        'related_counts' => '\RevampCRM\Models\RelatedCounts',
        'add_another' => 'bool',
        'contact_pic_id' => 'string',
        'contact_email' => 'string',
        'user_pic_id' => 'string',
        'placeholder_color' => 'string',
        'deal_progress_percentage' => 'double',
        'lost_reason' => 'string',
        'lost_on' => '\DateTime',
        'won_on' => '\DateTime',
        'next_task_due_on' => '\DateTime',
        'next_task_id' => 'string',
        'deal_age' => 'string',
        'expected_closure_date' => '\DateTime',
        'name' => 'string',
        'owner_name' => 'string',
        'contact_name' => 'string',
        'organization_name' => 'string',
        'created_on' => '\DateTime',
        'updated_on' => '\DateTime',
        'status' => 'string',
        'deal_stage' => 'string',
        'value' => 'double',
        'probability' => 'double',
        'tags' => 'string',
        'task_alert_status' => 'string',
        'forecasted_sale' => 'double',
        'product' => 'string',
        'sales_region' => 'string',
        'deal_source' => 'string',
        'deal_status_hint' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        '_id' => '_id',
        'account_id' => 'AccountId',
        'attachments' => 'Attachments',
        'related_counts' => 'RelatedCounts',
        'add_another' => 'AddAnother',
        'contact_pic_id' => 'ContactPicId',
        'contact_email' => 'ContactEmail',
        'user_pic_id' => 'UserPicId',
        'placeholder_color' => 'PlaceholderColor',
        'deal_progress_percentage' => 'DealProgressPercentage',
        'lost_reason' => 'LostReason',
        'lost_on' => 'LostOn',
        'won_on' => 'WonOn',
        'next_task_due_on' => 'NextTaskDueOn',
        'next_task_id' => 'NextTaskId',
        'deal_age' => 'DealAge',
        'expected_closure_date' => 'ExpectedClosureDate',
        'name' => 'Name',
        'owner_name' => 'OwnerName',
        'contact_name' => 'ContactName',
        'organization_name' => 'OrganizationName',
        'created_on' => 'CreatedOn',
        'updated_on' => 'UpdatedOn',
        'status' => 'Status',
        'deal_stage' => 'DealStage',
        'value' => 'Value',
        'probability' => 'Probability',
        'tags' => 'Tags',
        'task_alert_status' => 'TaskAlertStatus',
        'forecasted_sale' => 'ForecastedSale',
        'product' => 'Product',
        'sales_region' => 'SalesRegion',
        'deal_source' => 'DealSource',
        'deal_status_hint' => 'DealStatusHint'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        '_id' => 'setId',
        'account_id' => 'setAccountId',
        'attachments' => 'setAttachments',
        'related_counts' => 'setRelatedCounts',
        'add_another' => 'setAddAnother',
        'contact_pic_id' => 'setContactPicId',
        'contact_email' => 'setContactEmail',
        'user_pic_id' => 'setUserPicId',
        'placeholder_color' => 'setPlaceholderColor',
        'deal_progress_percentage' => 'setDealProgressPercentage',
        'lost_reason' => 'setLostReason',
        'lost_on' => 'setLostOn',
        'won_on' => 'setWonOn',
        'next_task_due_on' => 'setNextTaskDueOn',
        'next_task_id' => 'setNextTaskId',
        'deal_age' => 'setDealAge',
        'expected_closure_date' => 'setExpectedClosureDate',
        'name' => 'setName',
        'owner_name' => 'setOwnerName',
        'contact_name' => 'setContactName',
        'organization_name' => 'setOrganizationName',
        'created_on' => 'setCreatedOn',
        'updated_on' => 'setUpdatedOn',
        'status' => 'setStatus',
        'deal_stage' => 'setDealStage',
        'value' => 'setValue',
        'probability' => 'setProbability',
        'tags' => 'setTags',
        'task_alert_status' => 'setTaskAlertStatus',
        'forecasted_sale' => 'setForecastedSale',
        'product' => 'setProduct',
        'sales_region' => 'setSalesRegion',
        'deal_source' => 'setDealSource',
        'deal_status_hint' => 'setDealStatusHint'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        '_id' => 'getId',
        'account_id' => 'getAccountId',
        'attachments' => 'getAttachments',
        'related_counts' => 'getRelatedCounts',
        'add_another' => 'getAddAnother',
        'contact_pic_id' => 'getContactPicId',
        'contact_email' => 'getContactEmail',
        'user_pic_id' => 'getUserPicId',
        'placeholder_color' => 'getPlaceholderColor',
        'deal_progress_percentage' => 'getDealProgressPercentage',
        'lost_reason' => 'getLostReason',
        'lost_on' => 'getLostOn',
        'won_on' => 'getWonOn',
        'next_task_due_on' => 'getNextTaskDueOn',
        'next_task_id' => 'getNextTaskId',
        'deal_age' => 'getDealAge',
        'expected_closure_date' => 'getExpectedClosureDate',
        'name' => 'getName',
        'owner_name' => 'getOwnerName',
        'contact_name' => 'getContactName',
        'organization_name' => 'getOrganizationName',
        'created_on' => 'getCreatedOn',
        'updated_on' => 'getUpdatedOn',
        'status' => 'getStatus',
        'deal_stage' => 'getDealStage',
        'value' => 'getValue',
        'probability' => 'getProbability',
        'tags' => 'getTags',
        'task_alert_status' => 'getTaskAlertStatus',
        'forecasted_sale' => 'getForecastedSale',
        'product' => 'getProduct',
        'sales_region' => 'getSalesRegion',
        'deal_source' => 'getDealSource',
        'deal_status_hint' => 'getDealStatusHint'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['related_counts'] = isset($data['related_counts']) ? $data['related_counts'] : null;
        $this->container['add_another'] = isset($data['add_another']) ? $data['add_another'] : null;
        $this->container['contact_pic_id'] = isset($data['contact_pic_id']) ? $data['contact_pic_id'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['user_pic_id'] = isset($data['user_pic_id']) ? $data['user_pic_id'] : null;
        $this->container['placeholder_color'] = isset($data['placeholder_color']) ? $data['placeholder_color'] : null;
        $this->container['deal_progress_percentage'] = isset($data['deal_progress_percentage']) ? $data['deal_progress_percentage'] : null;
        $this->container['lost_reason'] = isset($data['lost_reason']) ? $data['lost_reason'] : null;
        $this->container['lost_on'] = isset($data['lost_on']) ? $data['lost_on'] : null;
        $this->container['won_on'] = isset($data['won_on']) ? $data['won_on'] : null;
        $this->container['next_task_due_on'] = isset($data['next_task_due_on']) ? $data['next_task_due_on'] : null;
        $this->container['next_task_id'] = isset($data['next_task_id']) ? $data['next_task_id'] : null;
        $this->container['deal_age'] = isset($data['deal_age']) ? $data['deal_age'] : null;
        $this->container['expected_closure_date'] = isset($data['expected_closure_date']) ? $data['expected_closure_date'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['owner_name'] = isset($data['owner_name']) ? $data['owner_name'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['organization_name'] = isset($data['organization_name']) ? $data['organization_name'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['updated_on'] = isset($data['updated_on']) ? $data['updated_on'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['deal_stage'] = isset($data['deal_stage']) ? $data['deal_stage'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['probability'] = isset($data['probability']) ? $data['probability'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['task_alert_status'] = isset($data['task_alert_status']) ? $data['task_alert_status'] : null;
        $this->container['forecasted_sale'] = isset($data['forecasted_sale']) ? $data['forecasted_sale'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['sales_region'] = isset($data['sales_region']) ? $data['sales_region'] : null;
        $this->container['deal_source'] = isset($data['deal_source']) ? $data['deal_source'] : null;
        $this->container['deal_status_hint'] = isset($data['deal_status_hint']) ? $data['deal_status_hint'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['deal_stage'] === null) {
            $invalid_properties[] = "'deal_stage' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalid_properties[] = "'value' can't be null";
        }
        if (!is_null($this->container['probability']) && ($this->container['probability'] > 100.0)) {
            $invalid_properties[] = "invalid value for 'probability', must be smaller than or equal to 100.0.";
        }

        if (!is_null($this->container['probability']) && ($this->container['probability'] < 0.0)) {
            $invalid_properties[] = "invalid value for 'probability', must be bigger than or equal to 0.0.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['deal_stage'] === null) {
            return false;
        }
        if ($this->container['value'] === null) {
            return false;
        }
        if ($this->container['probability'] > 100.0) {
            return false;
        }
        if ($this->container['probability'] < 0.0) {
            return false;
        }
        return true;
    }


    /**
     * Gets _id
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     * @param string $_id
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets account_id
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param string $account_id
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets attachments
     * @return \RevampCRM\Models\AttachmentSummary[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     * @param \RevampCRM\Models\AttachmentSummary[] $attachments
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets related_counts
     * @return \RevampCRM\Models\RelatedCounts
     */
    public function getRelatedCounts()
    {
        return $this->container['related_counts'];
    }

    /**
     * Sets related_counts
     * @param \RevampCRM\Models\RelatedCounts $related_counts
     * @return $this
     */
    public function setRelatedCounts($related_counts)
    {
        $this->container['related_counts'] = $related_counts;

        return $this;
    }

    /**
     * Gets add_another
     * @return bool
     */
    public function getAddAnother()
    {
        return $this->container['add_another'];
    }

    /**
     * Sets add_another
     * @param bool $add_another
     * @return $this
     */
    public function setAddAnother($add_another)
    {
        $this->container['add_another'] = $add_another;

        return $this;
    }

    /**
     * Gets contact_pic_id
     * @return string
     */
    public function getContactPicId()
    {
        return $this->container['contact_pic_id'];
    }

    /**
     * Sets contact_pic_id
     * @param string $contact_pic_id
     * @return $this
     */
    public function setContactPicId($contact_pic_id)
    {
        $this->container['contact_pic_id'] = $contact_pic_id;

        return $this;
    }

    /**
     * Gets contact_email
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     * @param string $contact_email
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets user_pic_id
     * @return string
     */
    public function getUserPicId()
    {
        return $this->container['user_pic_id'];
    }

    /**
     * Sets user_pic_id
     * @param string $user_pic_id
     * @return $this
     */
    public function setUserPicId($user_pic_id)
    {
        $this->container['user_pic_id'] = $user_pic_id;

        return $this;
    }

    /**
     * Gets placeholder_color
     * @return string
     */
    public function getPlaceholderColor()
    {
        return $this->container['placeholder_color'];
    }

    /**
     * Sets placeholder_color
     * @param string $placeholder_color
     * @return $this
     */
    public function setPlaceholderColor($placeholder_color)
    {
        $this->container['placeholder_color'] = $placeholder_color;

        return $this;
    }

    /**
     * Gets deal_progress_percentage
     * @return double
     */
    public function getDealProgressPercentage()
    {
        return $this->container['deal_progress_percentage'];
    }

    /**
     * Sets deal_progress_percentage
     * @param double $deal_progress_percentage
     * @return $this
     */
    public function setDealProgressPercentage($deal_progress_percentage)
    {
        $this->container['deal_progress_percentage'] = $deal_progress_percentage;

        return $this;
    }

    /**
     * Gets lost_reason
     * @return string
     */
    public function getLostReason()
    {
        return $this->container['lost_reason'];
    }

    /**
     * Sets lost_reason
     * @param string $lost_reason
     * @return $this
     */
    public function setLostReason($lost_reason)
    {
        $this->container['lost_reason'] = $lost_reason;

        return $this;
    }

    /**
     * Gets lost_on
     * @return \DateTime
     */
    public function getLostOn()
    {
        return $this->container['lost_on'];
    }

    /**
     * Sets lost_on
     * @param \DateTime $lost_on
     * @return $this
     */
    public function setLostOn($lost_on)
    {
        $this->container['lost_on'] = $lost_on;

        return $this;
    }

    /**
     * Gets won_on
     * @return \DateTime
     */
    public function getWonOn()
    {
        return $this->container['won_on'];
    }

    /**
     * Sets won_on
     * @param \DateTime $won_on
     * @return $this
     */
    public function setWonOn($won_on)
    {
        $this->container['won_on'] = $won_on;

        return $this;
    }

    /**
     * Gets next_task_due_on
     * @return \DateTime
     */
    public function getNextTaskDueOn()
    {
        return $this->container['next_task_due_on'];
    }

    /**
     * Sets next_task_due_on
     * @param \DateTime $next_task_due_on
     * @return $this
     */
    public function setNextTaskDueOn($next_task_due_on)
    {
        $this->container['next_task_due_on'] = $next_task_due_on;

        return $this;
    }

    /**
     * Gets next_task_id
     * @return string
     */
    public function getNextTaskId()
    {
        return $this->container['next_task_id'];
    }

    /**
     * Sets next_task_id
     * @param string $next_task_id
     * @return $this
     */
    public function setNextTaskId($next_task_id)
    {
        $this->container['next_task_id'] = $next_task_id;

        return $this;
    }

    /**
     * Gets deal_age
     * @return string
     */
    public function getDealAge()
    {
        return $this->container['deal_age'];
    }

    /**
     * Sets deal_age
     * @param string $deal_age
     * @return $this
     */
    public function setDealAge($deal_age)
    {
        $this->container['deal_age'] = $deal_age;

        return $this;
    }

    /**
     * Gets expected_closure_date
     * @return \DateTime
     */
    public function getExpectedClosureDate()
    {
        return $this->container['expected_closure_date'];
    }

    /**
     * Sets expected_closure_date
     * @param \DateTime $expected_closure_date
     * @return $this
     */
    public function setExpectedClosureDate($expected_closure_date)
    {
        $this->container['expected_closure_date'] = $expected_closure_date;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets owner_name
     * @return string
     */
    public function getOwnerName()
    {
        return $this->container['owner_name'];
    }

    /**
     * Sets owner_name
     * @param string $owner_name
     * @return $this
     */
    public function setOwnerName($owner_name)
    {
        $this->container['owner_name'] = $owner_name;

        return $this;
    }

    /**
     * Gets contact_name
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     * @param string $contact_name
     * @return $this
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets organization_name
     * @return string
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     * @param string $organization_name
     * @return $this
     */
    public function setOrganizationName($organization_name)
    {
        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets created_on
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     * @param \DateTime $created_on
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets updated_on
     * @return \DateTime
     */
    public function getUpdatedOn()
    {
        return $this->container['updated_on'];
    }

    /**
     * Sets updated_on
     * @param \DateTime $updated_on
     * @return $this
     */
    public function setUpdatedOn($updated_on)
    {
        $this->container['updated_on'] = $updated_on;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets deal_stage
     * @return string
     */
    public function getDealStage()
    {
        return $this->container['deal_stage'];
    }

    /**
     * Sets deal_stage
     * @param string $deal_stage
     * @return $this
     */
    public function setDealStage($deal_stage)
    {
        $this->container['deal_stage'] = $deal_stage;

        return $this;
    }

    /**
     * Gets value
     * @return double
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param double $value
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets probability
     * @return double
     */
    public function getProbability()
    {
        return $this->container['probability'];
    }

    /**
     * Sets probability
     * @param double $probability
     * @return $this
     */
    public function setProbability($probability)
    {

        if ($probability > 100.0) {
            throw new \InvalidArgumentException('invalid value for $probability when calling DealViewModel., must be smaller than or equal to 100.0.');
        }
        if ($probability < 0.0) {
            throw new \InvalidArgumentException('invalid value for $probability when calling DealViewModel., must be bigger than or equal to 0.0.');
        }
        $this->container['probability'] = $probability;

        return $this;
    }

    /**
     * Gets tags
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string $tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets task_alert_status
     * @return string
     */
    public function getTaskAlertStatus()
    {
        return $this->container['task_alert_status'];
    }

    /**
     * Sets task_alert_status
     * @param string $task_alert_status
     * @return $this
     */
    public function setTaskAlertStatus($task_alert_status)
    {
        $this->container['task_alert_status'] = $task_alert_status;

        return $this;
    }

    /**
     * Gets forecasted_sale
     * @return double
     */
    public function getForecastedSale()
    {
        return $this->container['forecasted_sale'];
    }

    /**
     * Sets forecasted_sale
     * @param double $forecasted_sale
     * @return $this
     */
    public function setForecastedSale($forecasted_sale)
    {
        $this->container['forecasted_sale'] = $forecasted_sale;

        return $this;
    }

    /**
     * Gets product
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     * @param string $product
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets sales_region
     * @return string
     */
    public function getSalesRegion()
    {
        return $this->container['sales_region'];
    }

    /**
     * Sets sales_region
     * @param string $sales_region
     * @return $this
     */
    public function setSalesRegion($sales_region)
    {
        $this->container['sales_region'] = $sales_region;

        return $this;
    }

    /**
     * Gets deal_source
     * @return string
     */
    public function getDealSource()
    {
        return $this->container['deal_source'];
    }

    /**
     * Sets deal_source
     * @param string $deal_source
     * @return $this
     */
    public function setDealSource($deal_source)
    {
        $this->container['deal_source'] = $deal_source;

        return $this;
    }

    /**
     * Gets deal_status_hint
     * @return string
     */
    public function getDealStatusHint()
    {
        return $this->container['deal_status_hint'];
    }

    /**
     * Sets deal_status_hint
     * @param string $deal_status_hint
     * @return $this
     */
    public function setDealStatusHint($deal_status_hint)
    {
        $this->container['deal_status_hint'] = $deal_status_hint;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


