<?php
/**
 * ECommerceOrderApiModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\Models;

use \ArrayAccess;

/**
 * ECommerceOrderApiModel Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RevampCRM\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ECommerceOrderApiModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ECommerceOrderApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        '_id' => 'string',
        'account_id' => 'string',
        'contact_id' => 'string',
        'user_id' => 'string',
        'created_on' => '\DateTime',
        'updated_on' => '\DateTime',
        'ecomm_provider_name' => 'string',
        'provider_store_id' => 'string',
        'provider_order_id' => 'string',
        'provider_order_reference' => 'string',
        'order_note' => 'string',
        'order_custom_data' => 'string',
        'sub_total_price' => 'double',
        'total_tax' => 'double',
        'total_discount' => 'double',
        'total_price' => 'double',
        'total_refund' => 'double',
        'total_refunded_quantity' => 'double',
        'num_of_lines' => 'int',
        'num_of_items' => 'int',
        'shipping_price' => 'double',
        'financial_status' => 'string',
        'shipping_status' => 'string',
        'currency' => 'string',
        'cancel_reason' => 'string',
        'line_items' => '\RevampCRM\Models\ECommerceCheckOutLineApiModel[]',
        'order_campaign' => '\RevampCRM\Models\ECommerceOrderCampaignApiModel',
        'customer'=> '\RevampCRM\Models\ContactCSVApiModel',
        'source_name'=> 'string',
        'coupon'=>'string',
        'tags'=>'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        '_id' => '_id',
        'account_id' => 'AccountId',
        'contact_id' => 'ContactId',
        'user_id' => 'UserId',
        'created_on' => 'CreatedOn',
        'updated_on' => 'UpdatedOn',
        'ecomm_provider_name' => 'EcommProviderName',
        'provider_store_id' => 'ProviderStoreId',
        'provider_order_id' => 'ProviderOrderId',
        'provider_order_reference' => 'ProviderOrderReference',
        'order_note' => 'OrderNote',
        'order_custom_data' => 'OrderCustomData',
        'sub_total_price' => 'SubTotalPrice',
        'total_tax' => 'TotalTax',
        'total_discount' => 'TotalDiscount',
        'total_price' => 'TotalPrice',
        'total_refund' => 'TotalRefund',
        'total_refunded_quantity' => 'TotalRefundedQuantity',
        'num_of_lines' => 'NumOfLines',
        'num_of_items' => 'NumOfItems',
        'shipping_price' => 'ShippingPrice',
        'financial_status' => 'FinancialStatus',
        'shipping_status' => 'ShippingStatus',
        'currency' => 'Currency',
        'cancel_reason' => 'CancelReason',
        'line_items' => 'LineItems',
        'order_campaign' => 'OrderCampaign',
        'customer' => 'Customer',
        'source_name' => 'SourceName',
        'coupon'=>'coupon',
        'tags'=>'Tags'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        '_id' => 'setId',
        'account_id' => 'setAccountId',
        'contact_id' => 'setContactId',
        'user_id' => 'setUserId',
        'created_on' => 'setCreatedOn',
        'updated_on' => 'setUpdatedOn',
        'ecomm_provider_name' => 'setEcommProviderName',
        'provider_store_id' => 'setProviderStoreId',
        'provider_order_id' => 'setProviderOrderId',
        'provider_order_reference' => 'setProviderOrderReference',
        'order_note' => 'setOrderNote',
        'order_custom_data' => 'setOrderCustomData',
        'sub_total_price' => 'setSubTotalPrice',
        'total_tax' => 'setTotalTax',
        'total_discount' => 'setTotalDiscount',
        'total_price' => 'setTotalPrice',
        'num_of_lines' => 'setNumOfLines',
        'num_of_items' => 'setNumOfItems',
        'shipping_price' => 'setShippingPrice',
        'total_refund' => 'setTotalRefund',
        'total_refunded_quantity' => 'setTotalRefundedQuantity',
        'financial_status' => 'setFinancialStatus',
        'shipping_status' => 'setShippingStatus',
        'currency' => 'setCurrency',
        'cancel_reason' => 'setCancelReason',
        'line_items' => 'setLineItems',
        'order_campaign' => 'setOrderCampaign',
        'customer' => 'setCustomer',
        'source_name' => 'setSourceName',
        'coupon'=>'setCoupon',
        'tags'=>'setTags'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        '_id' => 'getId',
        'account_id' => 'getAccountId',
        'contact_id' => 'getContactId',
        'user_id' => 'getUserId',
        'created_on' => 'getCreatedOn',
        'updated_on' => 'getUpdatedOn',
        'ecomm_provider_name' => 'getEcommProviderName',
        'provider_store_id' => 'getProviderStoreId',
        'provider_order_id' => 'getProviderOrderId',
        'provider_order_reference' => 'getProviderOrderReference',
        'order_note' => 'getOrderNote',
        'order_custom_data' => 'getOrderCustomData',
        'sub_total_price' => 'getSubTotalPrice',
        'total_tax' => 'getTotalTax',
        'total_discount' => 'getTotalDiscount',
        'total_price' => 'getTotalPrice',
        'num_of_lines' => 'getNumOfLines',
        'num_of_items' => 'getNumOfItems',
        'shipping_price' => 'getShippingPrice',
        'total_refund' => 'getTotalRefund',
        'total_refunded_quantity' => 'getTotalRefundedQuantity',
        'financial_status' => 'getFinancialStatus',
        'shipping_status' => 'getShippingStatus',
        'currency' => 'getCurrency',
        'cancel_reason' => 'getCancelReason',
        'line_items' => 'getLineItems',
        'order_campaign' => 'getOrderCampaign',
        'customer' => 'getCustomer',
        'source_name' => 'getSourceName',
        'coupon'=>'getCoupon',
        'tags'=>'getTags'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['updated_on'] = isset($data['updated_on']) ? $data['updated_on'] : null;
        $this->container['ecomm_provider_name'] = isset($data['ecomm_provider_name']) ? $data['ecomm_provider_name'] : null;
        $this->container['provider_store_id'] = isset($data['provider_store_id']) ? $data['provider_store_id'] : null;
        $this->container['provider_order_id'] = isset($data['provider_order_id']) ? $data['provider_order_id'] : null;
        $this->container['provider_order_reference'] = isset($data['provider_order_reference']) ? $data['provider_order_reference'] : null;
        $this->container['order_note'] = isset($data['order_note']) ? $data['order_note'] : null;
        $this->container['order_custom_data'] = isset($data['order_custom_data']) ? $data['order_custom_data'] : null;
        $this->container['sub_total_price'] = isset($data['sub_total_price']) ? $data['sub_total_price'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['total_discount'] = isset($data['total_discount']) ? $data['total_discount'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['num_of_lines'] = isset($data['num_of_lines']) ? $data['num_of_lines'] : null;
        $this->container['num_of_items'] = isset($data['num_of_items']) ? $data['num_of_items'] : null;
        $this->container['shipping_price'] = isset($data['shipping_price']) ? $data['shipping_price'] : null;
        $this->container['total_refund'] = isset($data['total_refund']) ? $data['total_refund'] : null;
        $this->container['total_refunded_quantity'] = isset($data['total_refunded_quantity']) ? $data['total_refunded_quantity'] : null;
        $this->container['financial_status'] = isset($data['financial_status']) ? $data['financial_status'] : null;
        $this->container['shipping_status'] = isset($data['shipping_status']) ? $data['shipping_status'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['cancel_reason'] = isset($data['cancel_reason']) ? $data['cancel_reason'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['order_campaign'] = isset($data['order_campaign']) ? $data['order_campaign'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['source_name'] = isset($data['source_name']) ? $data['source_name'] : null;
        $this->container['coupon'] = isset($data['coupon']) ? $data['coupon'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets _id
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     * @param string $_id
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets account_id
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param string $account_id
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets contact_id
     * @return string
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     * @param string $contact_id
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets created_on
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     * @param \DateTime $created_on
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets updated_on
     * @return \DateTime
     */
    public function getUpdatedOn()
    {
        return $this->container['updated_on'];
    }

    /**
     * Sets updated_on
     * @param \DateTime $updated_on
     * @return $this
     */
    public function setUpdatedOn($updated_on)
    {
        $this->container['updated_on'] = $updated_on;

        return $this;
    }

    /**
     * Gets ecomm_provider_name
     * @return string
     */
    public function getEcommProviderName()
    {
        return $this->container['ecomm_provider_name'];
    }

    /**
     * Sets ecomm_provider_name
     * @param string $ecomm_provider_name
     * @return $this
     */
    public function setEcommProviderName($ecomm_provider_name)
    {
        $this->container['ecomm_provider_name'] = $ecomm_provider_name;

        return $this;
    }

    /**
     * Gets provider_store_id
     * @return string
     */
    public function getProviderStoreId()
    {
        return $this->container['provider_store_id'];
    }

    /**
     * Sets provider_store_id
     * @param string $provider_store_id
     * @return $this
     */
    public function setProviderStoreId($provider_store_id)
    {
        $this->container['provider_store_id'] = $provider_store_id;

        return $this;
    }

    /**
     * Gets provider_order_id
     * @return string
     */
    public function getProviderOrderId()
    {
        return $this->container['provider_order_id'];
    }

    /**
     * Sets provider_order_id
     * @param string $provider_order_id
     * @return $this
     */
    public function setProviderOrderId($provider_order_id)
    {
        $this->container['provider_order_id'] = $provider_order_id;

        return $this;
    }

    /**
     * Gets provider_order_reference
     * @return string
     */
    public function getProviderOrderReference()
    {
        return $this->container['provider_order_reference'];
    }

    /**
     * Sets provider_order_reference
     * @param string $provider_order_reference
     * @return $this
     */
    public function setProviderOrderReference($provider_order_reference)
    {
        $this->container['provider_order_reference'] = $provider_order_reference;

        return $this;
    }

    /**
     * Gets order_note
     * @return string
     */
    public function getOrderNote()
    {
        return $this->container['order_note'];
    }

    /**
     * Sets order_note
     * @param string $order_note
     * @return $this
     */
    public function setOrderNote($order_note)
    {
        $this->container['order_note'] = $order_note;

        return $this;
    }

    /**
     * Gets order_custom_data
     * @return string
     */
    public function getOrderCustomData()
    {
        return $this->container['order_custom_data'];
    }

    /**
     * Sets order_custom_data
     * @param string $order_custom_data
     * @return $this
     */
    public function setOrderCustomData($order_custom_data)
    {
        $this->container['order_custom_data'] = $order_custom_data;

        return $this;
    }

    /**
     * Gets sub_total_price
     * @return double
     */
    public function getSubTotalPrice()
    {
        return $this->container['sub_total_price'];
    }

    /**
     * Sets sub_total_price
     * @param double $sub_total_price
     * @return $this
     */
    public function setSubTotalPrice($sub_total_price)
    {
        $this->container['sub_total_price'] = $sub_total_price;

        return $this;
    }

    /**
     * Gets total_tax
     * @return double
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     * @param double $total_tax
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets total_discount
     * @return double
     */
    public function getTotalDiscount()
    {
        return $this->container['total_discount'];
    }

    /**
     * Sets total_discount
     * @param double $total_discount
     * @return $this
     */
    public function setTotalDiscount($total_discount)
    {
        $this->container['total_discount'] = $total_discount;

        return $this;
    }

    /**
     * Gets total_price
     * @return double
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_refund
     * @param double $total_refund
     * @return $this
     */
    public function setTotalRefund($total_refund)
    {
        $this->container['total_refund'] = $total_refund;

        return $this;
    }

    /**
     * Gets total_refund
     * @return double
     */
    public function getTotalRefund()
    {
        return $this->container['total_refund'];
    }

    /**
     * Sets total_refunded_quantity
     * @param int $total_refunded_quantity
     * @return $this
     */
    public function setTotalRefundedQuantity($total_refunded_quantity)
    {
        $this->container['total_refunded_quantity'] = $total_refunded_quantity;

        return $this;
    }

    /**
     * Gets total_refunded_quantity
     * @return int
     */
    public function getTotalRefundedQuantity()
    {
        return $this->container['total_refunded_quantity'];
    }

    /**
     * Sets total_price
     * @param double $total_price
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets num_of_lines
     * @return int
     */
    public function getNumOfLines()
    {
        return $this->container['num_of_lines'];
    }

    /**
     * Sets num_of_lines
     * @param int $num_of_lines
     * @return $this
     */
    public function setNumOfLines($num_of_lines)
    {
        $this->container['num_of_lines'] = $num_of_lines;

        return $this;
    }

    /**
     * Gets num_of_items
     * @return int
     */
    public function getNumOfItems()
    {
        return $this->container['num_of_items'];
    }

    /**
     * Sets num_of_items
     * @param int $num_of_items
     * @return $this
     */
    public function setNumOfItems($num_of_items)
    {
        $this->container['num_of_items'] = $num_of_items;

        return $this;
    }

/**
     * Gets shipping_price
     * @return string
     */
    public function getShippingPrice()
    {
        return $this->container['shipping_price'];
    }

    /**
     * Sets shipping_price
     * @param string $shipping_price
     * @return $this
     */
    public function setShippingPrice($shipping_price)
    {
        $this->container['shipping_price'] = $shipping_price;

        return $this;
    }

    /**
     * Gets financial_status
     * @return string
     */
    public function getFinancialStatus()
    {
        return $this->container['financial_status'];
    }

    /**
     * Sets financial_status
     * @param string $financial_status
     * @return $this
     */
    public function setFinancialStatus($financial_status)
    {
        $this->container['financial_status'] = $financial_status;

        return $this;
    }

    /**
     * Gets shipping_status
     * @return string
     */
    public function getShippingStatus()
    {
        return $this->container['shipping_status'];
    }

    /**
     * Sets shipping_status
     * @param string $shipping_status
     * @return $this
     */
    public function setShippingStatus($shipping_status)
    {
        $this->container['shipping_status'] = $shipping_status;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets cancel reason
     * @return string
     */
    public function getCancelReason()
    {
        return $this->container['cancel_reason'];
    }

    /**
     * Sets cancel reason
     * @param string $cancelreason
     * @return $this
     */
    public function setCancelReason($cancelreason)
    {
        $this->container['cancel_reason'] = $cancelreason;

        return $this;
    }
    /**
     * Gets line_items
     * @return \RevampCRM\Models\ECommerceCheckOutLineApiModel[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     * @param \RevampCRM\Models\ECommerceCheckOutLineApiModel[] $line_items
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets order_campaign
     * @return \RevampCRM\Models\ECommerceOrderCampaignApiModel
     */
    public function getOrderCampaign()
    {
        return $this->container['order_campaign'];
    }

    /**
     * Sets order_campaign
     * @param \RevampCRM\Models\ECommerceOrderCampaignApiModel $order_campaign
     * @return $this
     */
    public function setOrderCampaign($order_campaign)
    {
        $this->container['order_campaign'] = $order_campaign;

        return $this;
    }
        
    /**
     * Gets customer
     * @return \RevampCRM\Models\ContactCSVApiModel
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     * @param \RevampCRM\Models\ContactCSVApiModel $customer
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }
        
    /**
     * Gets source_name
     * @return string
     */
    public function getSourceName()
    {
        return $this->container['source_name'];
    }

    /**
     * Sets source_name
     * @param string
     * @return $this
     */
    public function setSourceName($source_name)
    {
        $this->container['source_name'] = $source_name;

        return $this;
    }

    /**
     * Gets coupon
     * @return string
     */
    public function getCoupon()
    {
        return $this->container['coupon'];
    }

    /**
     * Sets coupon
     * @param string
     * @return $this
     */
    public function setCoupon($coupon)
    {
        $this->container['coupon'] = $coupon;

        return $this;
    }  

    /**
     * Gets tags
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }  

    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


