<?php
/**
 * AccountMessageViewModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\Models;

use \ArrayAccess;

/**
 * AccountMessageViewModel Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RevampCRM\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AccountMessageViewModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AccountMessageViewModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        '_id' => 'string',
        'account_id' => 'string',
        'user_id' => 'string',
        'type' => 'string',
        'message' => 'string',
        'related_to' => 'string',
        'action_url' => 'string',
        'created_on' => '\DateTime',
        'is_seen' => 'bool',
        'is_valid' => 'bool',
        'from_time' => 'string',
        'message_image' => 'string',
        'automation_step_type' => 'string',
        'is_error' => 'bool',
        'update_count' => 'int',
        'insert_count' => 'int',
        'error_count' => 'int',
        'nd_update_count' => 'int',
        'ndinsert_count' => 'int',
        'nd_error_count' => 'int',
        'is_external_link' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        '_id' => '_id',
        'account_id' => 'AccountId',
        'user_id' => 'UserId',
        'type' => 'Type',
        'message' => 'Message',
        'related_to' => 'RelatedTo',
        'action_url' => 'ActionUrl',
        'created_on' => 'CreatedOn',
        'is_seen' => 'IsSeen',
        'is_valid' => 'IsValid',
        'from_time' => 'FromTime',
        'message_image' => 'MessageImage',
        'automation_step_type' => 'AutomationStepType',
        'is_error' => 'IsError',
        'update_count' => 'UpdateCount',
        'insert_count' => 'insertCount',
        'error_count' => 'ErrorCount',
        'nd_update_count' => 'ndUpdateCount',
        'ndinsert_count' => 'ndinsertCount',
        'nd_error_count' => 'ndErrorCount',
        'is_external_link' => 'IsExternalLink'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        '_id' => 'setId',
        'account_id' => 'setAccountId',
        'user_id' => 'setUserId',
        'type' => 'setType',
        'message' => 'setMessage',
        'related_to' => 'setRelatedTo',
        'action_url' => 'setActionUrl',
        'created_on' => 'setCreatedOn',
        'is_seen' => 'setIsSeen',
        'is_valid' => 'setIsValid',
        'from_time' => 'setFromTime',
        'message_image' => 'setMessageImage',
        'automation_step_type' => 'setAutomationStepType',
        'is_error' => 'setIsError',
        'update_count' => 'setUpdateCount',
        'insert_count' => 'setInsertCount',
        'error_count' => 'setErrorCount',
        'nd_update_count' => 'setNdUpdateCount',
        'ndinsert_count' => 'setNdinsertCount',
        'nd_error_count' => 'setNdErrorCount',
        'is_external_link' => 'setIsExternalLink'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        '_id' => 'getId',
        'account_id' => 'getAccountId',
        'user_id' => 'getUserId',
        'type' => 'getType',
        'message' => 'getMessage',
        'related_to' => 'getRelatedTo',
        'action_url' => 'getActionUrl',
        'created_on' => 'getCreatedOn',
        'is_seen' => 'getIsSeen',
        'is_valid' => 'getIsValid',
        'from_time' => 'getFromTime',
        'message_image' => 'getMessageImage',
        'automation_step_type' => 'getAutomationStepType',
        'is_error' => 'getIsError',
        'update_count' => 'getUpdateCount',
        'insert_count' => 'getInsertCount',
        'error_count' => 'getErrorCount',
        'nd_update_count' => 'getNdUpdateCount',
        'ndinsert_count' => 'getNdinsertCount',
        'nd_error_count' => 'getNdErrorCount',
        'is_external_link' => 'getIsExternalLink'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['related_to'] = isset($data['related_to']) ? $data['related_to'] : null;
        $this->container['action_url'] = isset($data['action_url']) ? $data['action_url'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['is_seen'] = isset($data['is_seen']) ? $data['is_seen'] : null;
        $this->container['is_valid'] = isset($data['is_valid']) ? $data['is_valid'] : null;
        $this->container['from_time'] = isset($data['from_time']) ? $data['from_time'] : null;
        $this->container['message_image'] = isset($data['message_image']) ? $data['message_image'] : null;
        $this->container['automation_step_type'] = isset($data['automation_step_type']) ? $data['automation_step_type'] : null;
        $this->container['is_error'] = isset($data['is_error']) ? $data['is_error'] : null;
        $this->container['update_count'] = isset($data['update_count']) ? $data['update_count'] : null;
        $this->container['insert_count'] = isset($data['insert_count']) ? $data['insert_count'] : null;
        $this->container['error_count'] = isset($data['error_count']) ? $data['error_count'] : null;
        $this->container['nd_update_count'] = isset($data['nd_update_count']) ? $data['nd_update_count'] : null;
        $this->container['ndinsert_count'] = isset($data['ndinsert_count']) ? $data['ndinsert_count'] : null;
        $this->container['nd_error_count'] = isset($data['nd_error_count']) ? $data['nd_error_count'] : null;
        $this->container['is_external_link'] = isset($data['is_external_link']) ? $data['is_external_link'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets _id
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     * @param string $_id
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets account_id
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param string $account_id
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     * @param string $message
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets related_to
     * @return string
     */
    public function getRelatedTo()
    {
        return $this->container['related_to'];
    }

    /**
     * Sets related_to
     * @param string $related_to
     * @return $this
     */
    public function setRelatedTo($related_to)
    {
        $this->container['related_to'] = $related_to;

        return $this;
    }

    /**
     * Gets action_url
     * @return string
     */
    public function getActionUrl()
    {
        return $this->container['action_url'];
    }

    /**
     * Sets action_url
     * @param string $action_url
     * @return $this
     */
    public function setActionUrl($action_url)
    {
        $this->container['action_url'] = $action_url;

        return $this;
    }

    /**
     * Gets created_on
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     * @param \DateTime $created_on
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets is_seen
     * @return bool
     */
    public function getIsSeen()
    {
        return $this->container['is_seen'];
    }

    /**
     * Sets is_seen
     * @param bool $is_seen
     * @return $this
     */
    public function setIsSeen($is_seen)
    {
        $this->container['is_seen'] = $is_seen;

        return $this;
    }

    /**
     * Gets is_valid
     * @return bool
     */
    public function getIsValid()
    {
        return $this->container['is_valid'];
    }

    /**
     * Sets is_valid
     * @param bool $is_valid
     * @return $this
     */
    public function setIsValid($is_valid)
    {
        $this->container['is_valid'] = $is_valid;

        return $this;
    }

    /**
     * Gets from_time
     * @return string
     */
    public function getFromTime()
    {
        return $this->container['from_time'];
    }

    /**
     * Sets from_time
     * @param string $from_time
     * @return $this
     */
    public function setFromTime($from_time)
    {
        $this->container['from_time'] = $from_time;

        return $this;
    }

    /**
     * Gets message_image
     * @return string
     */
    public function getMessageImage()
    {
        return $this->container['message_image'];
    }

    /**
     * Sets message_image
     * @param string $message_image
     * @return $this
     */
    public function setMessageImage($message_image)
    {
        $this->container['message_image'] = $message_image;

        return $this;
    }

    /**
     * Gets automation_step_type
     * @return string
     */
    public function getAutomationStepType()
    {
        return $this->container['automation_step_type'];
    }

    /**
     * Sets automation_step_type
     * @param string $automation_step_type
     * @return $this
     */
    public function setAutomationStepType($automation_step_type)
    {
        $this->container['automation_step_type'] = $automation_step_type;

        return $this;
    }

    /**
     * Gets is_error
     * @return bool
     */
    public function getIsError()
    {
        return $this->container['is_error'];
    }

    /**
     * Sets is_error
     * @param bool $is_error
     * @return $this
     */
    public function setIsError($is_error)
    {
        $this->container['is_error'] = $is_error;

        return $this;
    }

    /**
     * Gets update_count
     * @return int
     */
    public function getUpdateCount()
    {
        return $this->container['update_count'];
    }

    /**
     * Sets update_count
     * @param int $update_count
     * @return $this
     */
    public function setUpdateCount($update_count)
    {
        $this->container['update_count'] = $update_count;

        return $this;
    }

    /**
     * Gets insert_count
     * @return int
     */
    public function getInsertCount()
    {
        return $this->container['insert_count'];
    }

    /**
     * Sets insert_count
     * @param int $insert_count
     * @return $this
     */
    public function setInsertCount($insert_count)
    {
        $this->container['insert_count'] = $insert_count;

        return $this;
    }

    /**
     * Gets error_count
     * @return int
     */
    public function getErrorCount()
    {
        return $this->container['error_count'];
    }

    /**
     * Sets error_count
     * @param int $error_count
     * @return $this
     */
    public function setErrorCount($error_count)
    {
        $this->container['error_count'] = $error_count;

        return $this;
    }

    /**
     * Gets nd_update_count
     * @return int
     */
    public function getNdUpdateCount()
    {
        return $this->container['nd_update_count'];
    }

    /**
     * Sets nd_update_count
     * @param int $nd_update_count
     * @return $this
     */
    public function setNdUpdateCount($nd_update_count)
    {
        $this->container['nd_update_count'] = $nd_update_count;

        return $this;
    }

    /**
     * Gets ndinsert_count
     * @return int
     */
    public function getNdinsertCount()
    {
        return $this->container['ndinsert_count'];
    }

    /**
     * Sets ndinsert_count
     * @param int $ndinsert_count
     * @return $this
     */
    public function setNdinsertCount($ndinsert_count)
    {
        $this->container['ndinsert_count'] = $ndinsert_count;

        return $this;
    }

    /**
     * Gets nd_error_count
     * @return int
     */
    public function getNdErrorCount()
    {
        return $this->container['nd_error_count'];
    }

    /**
     * Sets nd_error_count
     * @param int $nd_error_count
     * @return $this
     */
    public function setNdErrorCount($nd_error_count)
    {
        $this->container['nd_error_count'] = $nd_error_count;

        return $this;
    }

    /**
     * Gets is_external_link
     * @return bool
     */
    public function getIsExternalLink()
    {
        return $this->container['is_external_link'];
    }

    /**
     * Sets is_external_link
     * @param bool $is_external_link
     * @return $this
     */
    public function setIsExternalLink($is_external_link)
    {
        $this->container['is_external_link'] = $is_external_link;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


