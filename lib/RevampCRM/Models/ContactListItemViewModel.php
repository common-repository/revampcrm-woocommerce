<?php
/**
 * ContactListItemViewModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\Models;

use \ArrayAccess;

/**
 * ContactListItemViewModel Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RevampCRM\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ContactListItemViewModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ContactListItemViewModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        '_id' => 'string',
        'name' => 'string',
        'organization' => 'string',
        'profile_pic_id' => 'string',
        'title' => 'string',
        'tags' => 'string[]',
        'subscribed' => 'string',
        'group_memberships' => '\RevampCRM\Models\GroupMembershipViewModel[]',
        'gender' => 'string',
        'created_on' => '\DateTime',
        'updated_on' => '\DateTime',
        'description' => 'string',
        'assigned_user_name' => 'string',
        'assigned_user_id' => 'string',
        'assigned_use_profile_pic_id' => 'string',
        'last_contacted_by' => 'string',
        'last_contacted_by_name' => 'string',
        'last_contacted_type' => 'string',
        'last_contacted_title' => 'string',
        'last_contacted_on' => '\DateTime',
        'current_user_id' => 'string',
        'score' => 'double',
        'index' => 'int',
        'contact_info' => '\RevampCRM\Models\ContactInfoViewModel',
        'attachment' => '\RevampCRM\Models\HttpPostedFileBase',
        'placeholder_color' => 'string',
        'user_placeholder_color' => 'string',
        'last_cart_date' => '\DateTime',
        'orders_summary' => '\RevampCRM\Models\EcommerceOrdersSummary',
        'next_task_due_on' => '\DateTime',
        'next_task_id' => 'string',
        'email_value' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        '_id' => '_id',
        'name' => 'Name',
        'organization' => 'Organization',
        'profile_pic_id' => 'ProfilePicId',
        'title' => 'Title',
        'tags' => 'Tags',
        'subscribed' => 'Subscribed',
        'group_memberships' => 'GroupMemberships',
        'gender' => 'Gender',
        'created_on' => 'CreatedOn',
        'updated_on' => 'UpdatedOn',
        'description' => 'Description',
        'assigned_user_name' => 'AssignedUserName',
        'assigned_user_id' => 'AssignedUserId',
        'assigned_use_profile_pic_id' => 'AssignedUseProfilePicId',
        'last_contacted_by' => 'LastContactedBy',
        'last_contacted_by_name' => 'LastContactedByName',
        'last_contacted_type' => 'LastContactedType',
        'last_contacted_title' => 'LastContactedTitle',
        'last_contacted_on' => 'LastContactedOn',
        'current_user_id' => 'CurrentUserId',
        'score' => 'Score',
        'index' => 'Index',
        'contact_info' => 'ContactInfo',
        'attachment' => 'Attachment',
        'placeholder_color' => 'PlaceholderColor',
        'user_placeholder_color' => 'UserPlaceholderColor',
        'last_cart_date' => 'LastCartDate',
        'orders_summary' => 'OrdersSummary',
        'next_task_due_on' => 'NextTaskDueOn',
        'next_task_id' => 'NextTaskId',
        'email_value' => 'EmailValue'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        '_id' => 'setId',
        'name' => 'setName',
        'organization' => 'setOrganization',
        'profile_pic_id' => 'setProfilePicId',
        'title' => 'setTitle',
        'tags' => 'setTags',
        'subscribed' => 'setSubscribed',
        'group_memberships' => 'setGroupMemberships',
        'gender' => 'setGender',
        'created_on' => 'setCreatedOn',
        'updated_on' => 'setUpdatedOn',
        'description' => 'setDescription',
        'assigned_user_name' => 'setAssignedUserName',
        'assigned_user_id' => 'setAssignedUserId',
        'assigned_use_profile_pic_id' => 'setAssignedUseProfilePicId',
        'last_contacted_by' => 'setLastContactedBy',
        'last_contacted_by_name' => 'setLastContactedByName',
        'last_contacted_type' => 'setLastContactedType',
        'last_contacted_title' => 'setLastContactedTitle',
        'last_contacted_on' => 'setLastContactedOn',
        'current_user_id' => 'setCurrentUserId',
        'score' => 'setScore',
        'index' => 'setIndex',
        'contact_info' => 'setContactInfo',
        'attachment' => 'setAttachment',
        'placeholder_color' => 'setPlaceholderColor',
        'user_placeholder_color' => 'setUserPlaceholderColor',
        'last_cart_date' => 'setLastCartDate',
        'orders_summary' => 'setOrdersSummary',
        'next_task_due_on' => 'setNextTaskDueOn',
        'next_task_id' => 'setNextTaskId',
        'email_value' => 'setEmailValue'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        '_id' => 'getId',
        'name' => 'getName',
        'organization' => 'getOrganization',
        'profile_pic_id' => 'getProfilePicId',
        'title' => 'getTitle',
        'tags' => 'getTags',
        'subscribed' => 'getSubscribed',
        'group_memberships' => 'getGroupMemberships',
        'gender' => 'getGender',
        'created_on' => 'getCreatedOn',
        'updated_on' => 'getUpdatedOn',
        'description' => 'getDescription',
        'assigned_user_name' => 'getAssignedUserName',
        'assigned_user_id' => 'getAssignedUserId',
        'assigned_use_profile_pic_id' => 'getAssignedUseProfilePicId',
        'last_contacted_by' => 'getLastContactedBy',
        'last_contacted_by_name' => 'getLastContactedByName',
        'last_contacted_type' => 'getLastContactedType',
        'last_contacted_title' => 'getLastContactedTitle',
        'last_contacted_on' => 'getLastContactedOn',
        'current_user_id' => 'getCurrentUserId',
        'score' => 'getScore',
        'index' => 'getIndex',
        'contact_info' => 'getContactInfo',
        'attachment' => 'getAttachment',
        'placeholder_color' => 'getPlaceholderColor',
        'user_placeholder_color' => 'getUserPlaceholderColor',
        'last_cart_date' => 'getLastCartDate',
        'orders_summary' => 'getOrdersSummary',
        'next_task_due_on' => 'getNextTaskDueOn',
        'next_task_id' => 'getNextTaskId',
        'email_value' => 'getEmailValue'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const SUBSCRIBED_UNSUBSCRIBED = 'UNSUBSCRIBED';
    const SUBSCRIBED_MARKETING_OFF = 'MARKETING_OFF';
    const SUBSCRIBED_MARKETING_ON = 'MARKETING_ON';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSubscribedAllowableValues()
    {
        return [
            self::SUBSCRIBED_UNSUBSCRIBED,
            self::SUBSCRIBED_MARKETING_OFF,
            self::SUBSCRIBED_MARKETING_ON,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['profile_pic_id'] = isset($data['profile_pic_id']) ? $data['profile_pic_id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['subscribed'] = isset($data['subscribed']) ? $data['subscribed'] : null;
        $this->container['group_memberships'] = isset($data['group_memberships']) ? $data['group_memberships'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['updated_on'] = isset($data['updated_on']) ? $data['updated_on'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['assigned_user_name'] = isset($data['assigned_user_name']) ? $data['assigned_user_name'] : null;
        $this->container['assigned_user_id'] = isset($data['assigned_user_id']) ? $data['assigned_user_id'] : null;
        $this->container['assigned_use_profile_pic_id'] = isset($data['assigned_use_profile_pic_id']) ? $data['assigned_use_profile_pic_id'] : null;
        $this->container['last_contacted_by'] = isset($data['last_contacted_by']) ? $data['last_contacted_by'] : null;
        $this->container['last_contacted_by_name'] = isset($data['last_contacted_by_name']) ? $data['last_contacted_by_name'] : null;
        $this->container['last_contacted_type'] = isset($data['last_contacted_type']) ? $data['last_contacted_type'] : null;
        $this->container['last_contacted_title'] = isset($data['last_contacted_title']) ? $data['last_contacted_title'] : null;
        $this->container['last_contacted_on'] = isset($data['last_contacted_on']) ? $data['last_contacted_on'] : null;
        $this->container['current_user_id'] = isset($data['current_user_id']) ? $data['current_user_id'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['contact_info'] = isset($data['contact_info']) ? $data['contact_info'] : null;
        $this->container['attachment'] = isset($data['attachment']) ? $data['attachment'] : null;
        $this->container['placeholder_color'] = isset($data['placeholder_color']) ? $data['placeholder_color'] : null;
        $this->container['user_placeholder_color'] = isset($data['user_placeholder_color']) ? $data['user_placeholder_color'] : null;
        $this->container['last_cart_date'] = isset($data['last_cart_date']) ? $data['last_cart_date'] : null;
        $this->container['orders_summary'] = isset($data['orders_summary']) ? $data['orders_summary'] : null;
        $this->container['next_task_due_on'] = isset($data['next_task_due_on']) ? $data['next_task_due_on'] : null;
        $this->container['next_task_id'] = isset($data['next_task_id']) ? $data['next_task_id'] : null;
        $this->container['email_value'] = isset($data['email_value']) ? $data['email_value'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("UNSUBSCRIBED", "MARKETING_OFF", "MARKETING_ON");
        if (!in_array($this->container['subscribed'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'subscribed', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("UNSUBSCRIBED", "MARKETING_OFF", "MARKETING_ON");
        if (!in_array($this->container['subscribed'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets _id
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     * @param string $_id
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets organization
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     * @param string $organization
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets profile_pic_id
     * @return string
     */
    public function getProfilePicId()
    {
        return $this->container['profile_pic_id'];
    }

    /**
     * Sets profile_pic_id
     * @param string $profile_pic_id
     * @return $this
     */
    public function setProfilePicId($profile_pic_id)
    {
        $this->container['profile_pic_id'] = $profile_pic_id;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets subscribed
     * @return string
     */
    public function getSubscribed()
    {
        return $this->container['subscribed'];
    }

    /**
     * Sets subscribed
     * @param string $subscribed
     * @return $this
     */
    public function setSubscribed($subscribed)
    {
        $allowed_values = array('UNSUBSCRIBED', 'MARKETING_OFF', 'MARKETING_ON');
        if (!in_array($subscribed, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'subscribed', must be one of 'UNSUBSCRIBED', 'MARKETING_OFF', 'MARKETING_ON'");
        }
        $this->container['subscribed'] = $subscribed;

        return $this;
    }

    /**
     * Gets group_memberships
     * @return \RevampCRM\Models\GroupMembershipViewModel[]
     */
    public function getGroupMemberships()
    {
        return $this->container['group_memberships'];
    }

    /**
     * Sets group_memberships
     * @param \RevampCRM\Models\GroupMembershipViewModel[] $group_memberships
     * @return $this
     */
    public function setGroupMemberships($group_memberships)
    {
        $this->container['group_memberships'] = $group_memberships;

        return $this;
    }

    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     * @param string $gender
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets created_on
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     * @param \DateTime $created_on
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets updated_on
     * @return \DateTime
     */
    public function getUpdatedOn()
    {
        return $this->container['updated_on'];
    }

    /**
     * Sets updated_on
     * @param \DateTime $updated_on
     * @return $this
     */
    public function setUpdatedOn($updated_on)
    {
        $this->container['updated_on'] = $updated_on;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets assigned_user_name
     * @return string
     */
    public function getAssignedUserName()
    {
        return $this->container['assigned_user_name'];
    }

    /**
     * Sets assigned_user_name
     * @param string $assigned_user_name
     * @return $this
     */
    public function setAssignedUserName($assigned_user_name)
    {
        $this->container['assigned_user_name'] = $assigned_user_name;

        return $this;
    }

    /**
     * Gets assigned_user_id
     * @return string
     */
    public function getAssignedUserId()
    {
        return $this->container['assigned_user_id'];
    }

    /**
     * Sets assigned_user_id
     * @param string $assigned_user_id
     * @return $this
     */
    public function setAssignedUserId($assigned_user_id)
    {
        $this->container['assigned_user_id'] = $assigned_user_id;

        return $this;
    }

    /**
     * Gets assigned_use_profile_pic_id
     * @return string
     */
    public function getAssignedUseProfilePicId()
    {
        return $this->container['assigned_use_profile_pic_id'];
    }

    /**
     * Sets assigned_use_profile_pic_id
     * @param string $assigned_use_profile_pic_id
     * @return $this
     */
    public function setAssignedUseProfilePicId($assigned_use_profile_pic_id)
    {
        $this->container['assigned_use_profile_pic_id'] = $assigned_use_profile_pic_id;

        return $this;
    }

    /**
     * Gets last_contacted_by
     * @return string
     */
    public function getLastContactedBy()
    {
        return $this->container['last_contacted_by'];
    }

    /**
     * Sets last_contacted_by
     * @param string $last_contacted_by
     * @return $this
     */
    public function setLastContactedBy($last_contacted_by)
    {
        $this->container['last_contacted_by'] = $last_contacted_by;

        return $this;
    }

    /**
     * Gets last_contacted_by_name
     * @return string
     */
    public function getLastContactedByName()
    {
        return $this->container['last_contacted_by_name'];
    }

    /**
     * Sets last_contacted_by_name
     * @param string $last_contacted_by_name
     * @return $this
     */
    public function setLastContactedByName($last_contacted_by_name)
    {
        $this->container['last_contacted_by_name'] = $last_contacted_by_name;

        return $this;
    }

    /**
     * Gets last_contacted_type
     * @return string
     */
    public function getLastContactedType()
    {
        return $this->container['last_contacted_type'];
    }

    /**
     * Sets last_contacted_type
     * @param string $last_contacted_type
     * @return $this
     */
    public function setLastContactedType($last_contacted_type)
    {
        $this->container['last_contacted_type'] = $last_contacted_type;

        return $this;
    }

    /**
     * Gets last_contacted_title
     * @return string
     */
    public function getLastContactedTitle()
    {
        return $this->container['last_contacted_title'];
    }

    /**
     * Sets last_contacted_title
     * @param string $last_contacted_title
     * @return $this
     */
    public function setLastContactedTitle($last_contacted_title)
    {
        $this->container['last_contacted_title'] = $last_contacted_title;

        return $this;
    }

    /**
     * Gets last_contacted_on
     * @return \DateTime
     */
    public function getLastContactedOn()
    {
        return $this->container['last_contacted_on'];
    }

    /**
     * Sets last_contacted_on
     * @param \DateTime $last_contacted_on
     * @return $this
     */
    public function setLastContactedOn($last_contacted_on)
    {
        $this->container['last_contacted_on'] = $last_contacted_on;

        return $this;
    }

    /**
     * Gets current_user_id
     * @return string
     */
    public function getCurrentUserId()
    {
        return $this->container['current_user_id'];
    }

    /**
     * Sets current_user_id
     * @param string $current_user_id
     * @return $this
     */
    public function setCurrentUserId($current_user_id)
    {
        $this->container['current_user_id'] = $current_user_id;

        return $this;
    }

    /**
     * Gets score
     * @return double
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     * @param double $score
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets index
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     * @param int $index
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets contact_info
     * @return \RevampCRM\Models\ContactInfoViewModel
     */
    public function getContactInfo()
    {
        return $this->container['contact_info'];
    }

    /**
     * Sets contact_info
     * @param \RevampCRM\Models\ContactInfoViewModel $contact_info
     * @return $this
     */
    public function setContactInfo($contact_info)
    {
        $this->container['contact_info'] = $contact_info;

        return $this;
    }

    /**
     * Gets attachment
     * @return \RevampCRM\Models\HttpPostedFileBase
     */
    public function getAttachment()
    {
        return $this->container['attachment'];
    }

    /**
     * Sets attachment
     * @param \RevampCRM\Models\HttpPostedFileBase $attachment
     * @return $this
     */
    public function setAttachment($attachment)
    {
        $this->container['attachment'] = $attachment;

        return $this;
    }

    /**
     * Gets placeholder_color
     * @return string
     */
    public function getPlaceholderColor()
    {
        return $this->container['placeholder_color'];
    }

    /**
     * Sets placeholder_color
     * @param string $placeholder_color
     * @return $this
     */
    public function setPlaceholderColor($placeholder_color)
    {
        $this->container['placeholder_color'] = $placeholder_color;

        return $this;
    }

    /**
     * Gets user_placeholder_color
     * @return string
     */
    public function getUserPlaceholderColor()
    {
        return $this->container['user_placeholder_color'];
    }

    /**
     * Sets user_placeholder_color
     * @param string $user_placeholder_color
     * @return $this
     */
    public function setUserPlaceholderColor($user_placeholder_color)
    {
        $this->container['user_placeholder_color'] = $user_placeholder_color;

        return $this;
    }

    /**
     * Gets last_cart_date
     * @return \DateTime
     */
    public function getLastCartDate()
    {
        return $this->container['last_cart_date'];
    }

    /**
     * Sets last_cart_date
     * @param \DateTime $last_cart_date
     * @return $this
     */
    public function setLastCartDate($last_cart_date)
    {
        $this->container['last_cart_date'] = $last_cart_date;

        return $this;
    }

    /**
     * Gets orders_summary
     * @return \RevampCRM\Models\EcommerceOrdersSummary
     */
    public function getOrdersSummary()
    {
        return $this->container['orders_summary'];
    }

    /**
     * Sets orders_summary
     * @param \RevampCRM\Models\EcommerceOrdersSummary $orders_summary
     * @return $this
     */
    public function setOrdersSummary($orders_summary)
    {
        $this->container['orders_summary'] = $orders_summary;

        return $this;
    }

    /**
     * Gets next_task_due_on
     * @return \DateTime
     */
    public function getNextTaskDueOn()
    {
        return $this->container['next_task_due_on'];
    }

    /**
     * Sets next_task_due_on
     * @param \DateTime $next_task_due_on
     * @return $this
     */
    public function setNextTaskDueOn($next_task_due_on)
    {
        $this->container['next_task_due_on'] = $next_task_due_on;

        return $this;
    }

    /**
     * Gets next_task_id
     * @return string
     */
    public function getNextTaskId()
    {
        return $this->container['next_task_id'];
    }

    /**
     * Sets next_task_id
     * @param string $next_task_id
     * @return $this
     */
    public function setNextTaskId($next_task_id)
    {
        $this->container['next_task_id'] = $next_task_id;

        return $this;
    }

    /**
     * Gets email_value
     * @return string
     */
    public function getEmailValue()
    {
        return $this->container['email_value'];
    }

    /**
     * Sets email_value
     * @param string $email_value
     * @return $this
     */
    public function setEmailValue($email_value)
    {
        $this->container['email_value'] = $email_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


