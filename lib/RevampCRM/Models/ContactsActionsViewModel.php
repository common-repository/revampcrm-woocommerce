<?php
/**
 * ContactsActionsViewModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\Models;

use \ArrayAccess;

/**
 * ContactsActionsViewModel Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RevampCRM\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ContactsActionsViewModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ContactsActionsViewModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'type' => 'string',
        'assigned_user_id' => 'string',
        'assigned_user_name' => 'string',
        'contacts_ids' => 'string',
        'group_id' => 'string',
        'work_flow_id' => 'string',
        'tags' => 'string',
        'score' => 'string',
        'contact_stage' => 'string',
        'search_parameters' => '\RevampCRM\Models\SearchParametersViewModel'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'type' => 'Type',
        'assigned_user_id' => 'AssignedUserId',
        'assigned_user_name' => 'AssignedUserName',
        'contacts_ids' => 'ContactsIds',
        'group_id' => 'GroupId',
        'work_flow_id' => 'WorkFlowId',
        'tags' => 'Tags',
        'score' => 'Score',
        'contact_stage' => 'ContactStage',
        'search_parameters' => 'SearchParameters'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'type' => 'setType',
        'assigned_user_id' => 'setAssignedUserId',
        'assigned_user_name' => 'setAssignedUserName',
        'contacts_ids' => 'setContactsIds',
        'group_id' => 'setGroupId',
        'work_flow_id' => 'setWorkFlowId',
        'tags' => 'setTags',
        'score' => 'setScore',
        'contact_stage' => 'setContactStage',
        'search_parameters' => 'setSearchParameters'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'type' => 'getType',
        'assigned_user_id' => 'getAssignedUserId',
        'assigned_user_name' => 'getAssignedUserName',
        'contacts_ids' => 'getContactsIds',
        'group_id' => 'getGroupId',
        'work_flow_id' => 'getWorkFlowId',
        'tags' => 'getTags',
        'score' => 'getScore',
        'contact_stage' => 'getContactStage',
        'search_parameters' => 'getSearchParameters'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['assigned_user_id'] = isset($data['assigned_user_id']) ? $data['assigned_user_id'] : null;
        $this->container['assigned_user_name'] = isset($data['assigned_user_name']) ? $data['assigned_user_name'] : null;
        $this->container['contacts_ids'] = isset($data['contacts_ids']) ? $data['contacts_ids'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['work_flow_id'] = isset($data['work_flow_id']) ? $data['work_flow_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['contact_stage'] = isset($data['contact_stage']) ? $data['contact_stage'] : null;
        $this->container['search_parameters'] = isset($data['search_parameters']) ? $data['search_parameters'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets assigned_user_id
     * @return string
     */
    public function getAssignedUserId()
    {
        return $this->container['assigned_user_id'];
    }

    /**
     * Sets assigned_user_id
     * @param string $assigned_user_id
     * @return $this
     */
    public function setAssignedUserId($assigned_user_id)
    {
        $this->container['assigned_user_id'] = $assigned_user_id;

        return $this;
    }

    /**
     * Gets assigned_user_name
     * @return string
     */
    public function getAssignedUserName()
    {
        return $this->container['assigned_user_name'];
    }

    /**
     * Sets assigned_user_name
     * @param string $assigned_user_name
     * @return $this
     */
    public function setAssignedUserName($assigned_user_name)
    {
        $this->container['assigned_user_name'] = $assigned_user_name;

        return $this;
    }

    /**
     * Gets contacts_ids
     * @return string
     */
    public function getContactsIds()
    {
        return $this->container['contacts_ids'];
    }

    /**
     * Sets contacts_ids
     * @param string $contacts_ids
     * @return $this
     */
    public function setContactsIds($contacts_ids)
    {
        $this->container['contacts_ids'] = $contacts_ids;

        return $this;
    }

    /**
     * Gets group_id
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     * @param string $group_id
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets work_flow_id
     * @return string
     */
    public function getWorkFlowId()
    {
        return $this->container['work_flow_id'];
    }

    /**
     * Sets work_flow_id
     * @param string $work_flow_id
     * @return $this
     */
    public function setWorkFlowId($work_flow_id)
    {
        $this->container['work_flow_id'] = $work_flow_id;

        return $this;
    }

    /**
     * Gets tags
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string $tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets score
     * @return string
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     * @param string $score
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets contact_stage
     * @return string
     */
    public function getContactStage()
    {
        return $this->container['contact_stage'];
    }

    /**
     * Sets contact_stage
     * @param string $contact_stage
     * @return $this
     */
    public function setContactStage($contact_stage)
    {
        $this->container['contact_stage'] = $contact_stage;

        return $this;
    }

    /**
     * Gets search_parameters
     * @return \RevampCRM\Models\SearchParametersViewModel
     */
    public function getSearchParameters()
    {
        return $this->container['search_parameters'];
    }

    /**
     * Sets search_parameters
     * @param \RevampCRM\Models\SearchParametersViewModel $search_parameters
     * @return $this
     */
    public function setSearchParameters($search_parameters)
    {
        $this->container['search_parameters'] = $search_parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


