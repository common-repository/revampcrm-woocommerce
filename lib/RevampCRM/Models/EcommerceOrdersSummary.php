<?php
/**
 * EcommerceOrdersSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\Models;

use \ArrayAccess;

/**
 * EcommerceOrdersSummary Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RevampCRM\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EcommerceOrdersSummary implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'EcommerceOrdersSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'total_products_ordered' => 'double',
        'average_products_ordered' => 'double',
        'total_orders_value' => 'double',
        'average_orders_value' => 'double',
        'total_orders_count' => 'double',
        'categories' => 'string[]',
        'currency' => 'string',
        'tags' => 'string[]',
        'has_coupon' => 'bool',
        'last_order_date' => '\DateTime'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'total_products_ordered' => 'TotalProductsOrdered',
        'average_products_ordered' => 'AverageProductsOrdered',
        'total_orders_value' => 'TotalOrdersValue',
        'average_orders_value' => 'AverageOrdersValue',
        'total_orders_count' => 'TotalOrdersCount',
        'categories' => 'Categories',
        'currency' => 'Currency',
        'tags' => 'Tags',
        'has_coupon' => 'HasCoupon',
        'last_order_date' => 'LastOrderDate'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'total_products_ordered' => 'setTotalProductsOrdered',
        'average_products_ordered' => 'setAverageProductsOrdered',
        'total_orders_value' => 'setTotalOrdersValue',
        'average_orders_value' => 'setAverageOrdersValue',
        'total_orders_count' => 'setTotalOrdersCount',
        'categories' => 'setCategories',
        'currency' => 'setCurrency',
        'tags' => 'setTags',
        'has_coupon' => 'setHasCoupon',
        'last_order_date' => 'setLastOrderDate'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'total_products_ordered' => 'getTotalProductsOrdered',
        'average_products_ordered' => 'getAverageProductsOrdered',
        'total_orders_value' => 'getTotalOrdersValue',
        'average_orders_value' => 'getAverageOrdersValue',
        'total_orders_count' => 'getTotalOrdersCount',
        'categories' => 'getCategories',
        'currency' => 'getCurrency',
        'tags' => 'getTags',
        'has_coupon' => 'getHasCoupon',
        'last_order_date' => 'getLastOrderDate'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_products_ordered'] = isset($data['total_products_ordered']) ? $data['total_products_ordered'] : null;
        $this->container['average_products_ordered'] = isset($data['average_products_ordered']) ? $data['average_products_ordered'] : null;
        $this->container['total_orders_value'] = isset($data['total_orders_value']) ? $data['total_orders_value'] : null;
        $this->container['average_orders_value'] = isset($data['average_orders_value']) ? $data['average_orders_value'] : null;
        $this->container['total_orders_count'] = isset($data['total_orders_count']) ? $data['total_orders_count'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['has_coupon'] = isset($data['has_coupon']) ? $data['has_coupon'] : null;
        $this->container['last_order_date'] = isset($data['last_order_date']) ? $data['last_order_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets total_products_ordered
     * @return double
     */
    public function getTotalProductsOrdered()
    {
        return $this->container['total_products_ordered'];
    }

    /**
     * Sets total_products_ordered
     * @param double $total_products_ordered
     * @return $this
     */
    public function setTotalProductsOrdered($total_products_ordered)
    {
        $this->container['total_products_ordered'] = $total_products_ordered;

        return $this;
    }

    /**
     * Gets average_products_ordered
     * @return double
     */
    public function getAverageProductsOrdered()
    {
        return $this->container['average_products_ordered'];
    }

    /**
     * Sets average_products_ordered
     * @param double $average_products_ordered
     * @return $this
     */
    public function setAverageProductsOrdered($average_products_ordered)
    {
        $this->container['average_products_ordered'] = $average_products_ordered;

        return $this;
    }

    /**
     * Gets total_orders_value
     * @return double
     */
    public function getTotalOrdersValue()
    {
        return $this->container['total_orders_value'];
    }

    /**
     * Sets total_orders_value
     * @param double $total_orders_value
     * @return $this
     */
    public function setTotalOrdersValue($total_orders_value)
    {
        $this->container['total_orders_value'] = $total_orders_value;

        return $this;
    }

    /**
     * Gets average_orders_value
     * @return double
     */
    public function getAverageOrdersValue()
    {
        return $this->container['average_orders_value'];
    }

    /**
     * Sets average_orders_value
     * @param double $average_orders_value
     * @return $this
     */
    public function setAverageOrdersValue($average_orders_value)
    {
        $this->container['average_orders_value'] = $average_orders_value;

        return $this;
    }

    /**
     * Gets total_orders_count
     * @return double
     */
    public function getTotalOrdersCount()
    {
        return $this->container['total_orders_count'];
    }

    /**
     * Sets total_orders_count
     * @param double $total_orders_count
     * @return $this
     */
    public function setTotalOrdersCount($total_orders_count)
    {
        $this->container['total_orders_count'] = $total_orders_count;

        return $this;
    }

    /**
     * Gets categories
     * @return string[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     * @param string[] $categories
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets has_coupon
     * @return bool
     */
    public function getHasCoupon()
    {
        return $this->container['has_coupon'];
    }

    /**
     * Sets has_coupon
     * @param bool $has_coupon
     * @return $this
     */
    public function setHasCoupon($has_coupon)
    {
        $this->container['has_coupon'] = $has_coupon;

        return $this;
    }

    /**
     * Gets last_order_date
     * @return \DateTime
     */
    public function getLastOrderDate()
    {
        return $this->container['last_order_date'];
    }

    /**
     * Sets last_order_date
     * @param \DateTime $last_order_date
     * @return $this
     */
    public function setLastOrderDate($last_order_date)
    {
        $this->container['last_order_date'] = $last_order_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


