<?php
/**
 * ImportResultViewModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  RevampCRM\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevampCRM Developer API
 *
 * You can use this API to access Account related info and contacts. We currently support Basic Authentication. Using 'Username' and either 'Password' Or 'API Key' as the password
 *
 * OpenAPI spec version: v1
 * Contact: crm@revampco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RevampCRM\Models;

use \ArrayAccess;

/**
 * ImportResultViewModel Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RevampCRM\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ImportResultViewModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ImportResultViewModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'imported_entity' => 'string',
        'importing_into' => 'string',
        'importing_into_id' => 'string',
        'error_container' => 'string',
        'found_invalide_mails' => 'bool',
        'is_csv_mapper' => 'bool',
        'status' => 'string',
        'message' => 'string',
        'total_imported' => 'int',
        'total_updated' => 'int',
        'total_failed' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'imported_entity' => 'ImportedEntity',
        'importing_into' => 'ImportingInto',
        'importing_into_id' => 'ImportingIntoId',
        'error_container' => 'ErrorContainer',
        'found_invalide_mails' => 'foundInvalideMails',
        'is_csv_mapper' => 'isCSVMapper',
        'status' => 'status',
        'message' => 'message',
        'total_imported' => 'totalImported',
        'total_updated' => 'totalUpdated',
        'total_failed' => 'totalFailed'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'imported_entity' => 'setImportedEntity',
        'importing_into' => 'setImportingInto',
        'importing_into_id' => 'setImportingIntoId',
        'error_container' => 'setErrorContainer',
        'found_invalide_mails' => 'setFoundInvalideMails',
        'is_csv_mapper' => 'setIsCsvMapper',
        'status' => 'setStatus',
        'message' => 'setMessage',
        'total_imported' => 'setTotalImported',
        'total_updated' => 'setTotalUpdated',
        'total_failed' => 'setTotalFailed'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'imported_entity' => 'getImportedEntity',
        'importing_into' => 'getImportingInto',
        'importing_into_id' => 'getImportingIntoId',
        'error_container' => 'getErrorContainer',
        'found_invalide_mails' => 'getFoundInvalideMails',
        'is_csv_mapper' => 'getIsCsvMapper',
        'status' => 'getStatus',
        'message' => 'getMessage',
        'total_imported' => 'getTotalImported',
        'total_updated' => 'getTotalUpdated',
        'total_failed' => 'getTotalFailed'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['imported_entity'] = isset($data['imported_entity']) ? $data['imported_entity'] : null;
        $this->container['importing_into'] = isset($data['importing_into']) ? $data['importing_into'] : null;
        $this->container['importing_into_id'] = isset($data['importing_into_id']) ? $data['importing_into_id'] : null;
        $this->container['error_container'] = isset($data['error_container']) ? $data['error_container'] : null;
        $this->container['found_invalide_mails'] = isset($data['found_invalide_mails']) ? $data['found_invalide_mails'] : null;
        $this->container['is_csv_mapper'] = isset($data['is_csv_mapper']) ? $data['is_csv_mapper'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['total_imported'] = isset($data['total_imported']) ? $data['total_imported'] : null;
        $this->container['total_updated'] = isset($data['total_updated']) ? $data['total_updated'] : null;
        $this->container['total_failed'] = isset($data['total_failed']) ? $data['total_failed'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets imported_entity
     * @return string
     */
    public function getImportedEntity()
    {
        return $this->container['imported_entity'];
    }

    /**
     * Sets imported_entity
     * @param string $imported_entity
     * @return $this
     */
    public function setImportedEntity($imported_entity)
    {
        $this->container['imported_entity'] = $imported_entity;

        return $this;
    }

    /**
     * Gets importing_into
     * @return string
     */
    public function getImportingInto()
    {
        return $this->container['importing_into'];
    }

    /**
     * Sets importing_into
     * @param string $importing_into
     * @return $this
     */
    public function setImportingInto($importing_into)
    {
        $this->container['importing_into'] = $importing_into;

        return $this;
    }

    /**
     * Gets importing_into_id
     * @return string
     */
    public function getImportingIntoId()
    {
        return $this->container['importing_into_id'];
    }

    /**
     * Sets importing_into_id
     * @param string $importing_into_id
     * @return $this
     */
    public function setImportingIntoId($importing_into_id)
    {
        $this->container['importing_into_id'] = $importing_into_id;

        return $this;
    }

    /**
     * Gets error_container
     * @return string
     */
    public function getErrorContainer()
    {
        return $this->container['error_container'];
    }

    /**
     * Sets error_container
     * @param string $error_container
     * @return $this
     */
    public function setErrorContainer($error_container)
    {
        $this->container['error_container'] = $error_container;

        return $this;
    }

    /**
     * Gets found_invalide_mails
     * @return bool
     */
    public function getFoundInvalideMails()
    {
        return $this->container['found_invalide_mails'];
    }

    /**
     * Sets found_invalide_mails
     * @param bool $found_invalide_mails
     * @return $this
     */
    public function setFoundInvalideMails($found_invalide_mails)
    {
        $this->container['found_invalide_mails'] = $found_invalide_mails;

        return $this;
    }

    /**
     * Gets is_csv_mapper
     * @return bool
     */
    public function getIsCsvMapper()
    {
        return $this->container['is_csv_mapper'];
    }

    /**
     * Sets is_csv_mapper
     * @param bool $is_csv_mapper
     * @return $this
     */
    public function setIsCsvMapper($is_csv_mapper)
    {
        $this->container['is_csv_mapper'] = $is_csv_mapper;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     * @param string $message
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets total_imported
     * @return int
     */
    public function getTotalImported()
    {
        return $this->container['total_imported'];
    }

    /**
     * Sets total_imported
     * @param int $total_imported
     * @return $this
     */
    public function setTotalImported($total_imported)
    {
        $this->container['total_imported'] = $total_imported;

        return $this;
    }

    /**
     * Gets total_updated
     * @return int
     */
    public function getTotalUpdated()
    {
        return $this->container['total_updated'];
    }

    /**
     * Sets total_updated
     * @param int $total_updated
     * @return $this
     */
    public function setTotalUpdated($total_updated)
    {
        $this->container['total_updated'] = $total_updated;

        return $this;
    }

    /**
     * Gets total_failed
     * @return int
     */
    public function getTotalFailed()
    {
        return $this->container['total_failed'];
    }

    /**
     * Sets total_failed
     * @param int $total_failed
     * @return $this
     */
    public function setTotalFailed($total_failed)
    {
        $this->container['total_failed'] = $total_failed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RevampCRM\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


